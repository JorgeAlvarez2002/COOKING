{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1p-fNBTUFiB7N1OKIZnTD7M4qnJ8IJWuM","timestamp":1734306559417}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"tnNI-upfEaFv"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":17,"metadata":{"id":"gOHBNVF4ud1K","executionInfo":{"status":"ok","timestamp":1734366249140,"user_tz":-60,"elapsed":256,"user":{"displayName":"CLARA MORENO MARTÍNEZ","userId":"03285449096225219779"}}},"outputs":[],"source":["# To visualize plots in the notebook\n","%matplotlib inline\n","\n","import numpy as np\n","import pandas as pd # To read data tables from csv files\n","import matplotlib.pyplot as plt # To plot the figures\n","from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score, roc_curve, auc\n","\n","import os\n","from termcolor import colored\n","import tqdm\n","import scipy\n","import gc\n","import joblib\n","\n","# For plots and graphical results\n","import matplotlib.pyplot as plt\n","from mpl_toolkits.mplot3d import Axes3D\n","import pylab\n","\n","# That's default image size for this interactive session\n","pylab.rcParams['figure.figsize'] = 6, 4"]},{"cell_type":"code","execution_count":20,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2685,"status":"ok","timestamp":1734366277149,"user":{"displayName":"CLARA MORENO MARTÍNEZ","userId":"03285449096225219779"},"user_tz":-60},"id":"6uqSUk2IJ9pq","outputId":"a3bd137b-82dd-4fd5-b7c0-4c3f2130db63"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n","import pandas as pd\n","import torch\n","from sklearn.model_selection import train_test_split\n","\n","# Cargar los datos desde el archivo JSON\n","data_path = '/content/drive/My Drive/proyecto/full_format_recipes.json'\n","recipes_df = pd.read_json(data_path)\n","\n","# Usamos los embeddings generados con BERT\n","bert_embeddings = torch.load(\n","    '/content/drive/My Drive/proyecto/bert_embeddings.pt',\n","    weights_only=True  # Para evitar la advertencia de seguridad\n",")\n","\n","# Asegurarnos de que el target contenga solo las primeras 10,000 recetas\n","target = recipes_df['rating'].fillna(recipes_df['rating'].mean()).iloc[:10000]"]},{"cell_type":"markdown","metadata":{"id":"pzlkBJx5NAIJ"},"source":["### **1. Preparación de los datos de entrenamiento y de test**"]},{"cell_type":"code","execution_count":21,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":337,"status":"ok","timestamp":1734366280952,"user":{"displayName":"CLARA MORENO MARTÍNEZ","userId":"03285449096225219779"},"user_tz":-60},"id":"TQPTCvW9NAYv","outputId":"41097087-4da1-4918-fe06-ad457d7e8203"},"outputs":[{"output_type":"stream","name":"stdout","text":["Tamaño de X_train: torch.Size([8000, 768])\n","Tamaño de X_test: torch.Size([2000, 768])\n","Tamaño de y_train: (8000,)\n"]}],"source":["# Ahora dividimos el conjunto de datos en entrenamiento y prueba\n","X_train, X_test, y_train, y_test = train_test_split(\n","    bert_embeddings, target, test_size=0.2, random_state=42\n",")\n","\n","# Imprimir las formas de los datos para verificar\n","print(f\"Tamaño de X_train: {X_train.shape}\")\n","print(f\"Tamaño de X_test: {X_test.shape}\")\n","print(f\"Tamaño de y_train: {y_train.shape}\")"]},{"cell_type":"markdown","source":["### **2. Entrenamiento y evaluación**"],"metadata":{"id":"4g5aWeS6UfGH"}},{"cell_type":"markdown","source":["#### ***Red neuronal con PyTorch***"],"metadata":{"id":"Uvq0F0QjUQXt"}},{"cell_type":"code","source":["import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","from torch.utils.data import TensorDataset, DataLoader\n","\n","from sklearn.metrics import mean_squared_error, r2_score"],"metadata":{"id":"fQ0wdDjhzhaD","executionInfo":{"status":"ok","timestamp":1734366265157,"user_tz":-60,"elapsed":230,"user":{"displayName":"CLARA MORENO MARTÍNEZ","userId":"03285449096225219779"}}},"execution_count":18,"outputs":[]},{"cell_type":"code","source":["# Convertimos a tensores de PyTorch\n","X_train_tensor = torch.tensor(X_train, dtype=torch.float32)\n","X_test_tensor = torch.tensor(X_test, dtype=torch.float32)\n","\n","y_train_tensor = torch.tensor(y_train.values, dtype=torch.float32)\n","y_test_tensor = torch.tensor(y_test.values, dtype=torch.float32)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dDY6uhcgzl5N","executionInfo":{"status":"ok","timestamp":1734366283818,"user_tz":-60,"elapsed":235,"user":{"displayName":"CLARA MORENO MARTÍNEZ","userId":"03285449096225219779"}},"outputId":"5c342b0c-6222-4899-f0bd-c696fa00c0a6"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-22-d9e280acfb89>:2: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n","  X_train_tensor = torch.tensor(X_train, dtype=torch.float32)\n","<ipython-input-22-d9e280acfb89>:3: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n","  X_test_tensor = torch.tensor(X_test, dtype=torch.float32)\n"]}]},{"cell_type":"markdown","source":["###***CASO MÁS RÁPIDO, MENOS EFICIENTE***\n","\n","**Número de épocas = 5**\n","\n","**Tamaño de batch = 128**\n","\n","**Learning Rate = 0.1**"],"metadata":{"id":"KAVVHMb--Xwq"}},{"cell_type":"code","source":["# Creamos TensorDataset (combina características y etiquetas en un único objeto)\n","# y DataLoader (proporciona lotes de datos de un tamaño específico (batch_size))\n","train_dataset = TensorDataset(X_train_tensor, y_train_tensor)\n","train_loader = DataLoader(train_dataset, batch_size=128, shuffle=True)\n","\n","\n","# Define the neural network model\n","class Net(nn.Module):\n","    # Inicialización capas de la red (3)\n","    def __init__(self, input_size):\n","        super(Net, self).__init__()\n","        # En cada capa se reducen las dimensiones a 128, 64, y 1\n","        # Esto ayuda a aprender representaciones más abstractas de los datos a medida que se avanza a través de las capas\n","        # 128 y 64 son valores comunes para redes pequeñas\n","        # 1: la capa de salida tiene solo 1 neurona porque estamos prediciendo un valor continuo (rating receta)\n","        self.fc1 = nn.Linear(input_size, 128)\n","        self.fc2 = nn.Linear(128, 64)\n","        self.fc3 = nn.Linear(64, 1)\n","\n","    # Definimos cómo fluyen los datos a través de las capas: hacia adelante\n","    # Funcion de activacion ReLU (Rectified Linear Unit) que se aplica a la salida de una capa\n","    # antes de pasarla a la sigueinte capa\n","    def forward(self, x):\n","        x = F.relu(self.fc1(x))\n","        x = F.relu(self.fc2(x))\n","        x = self.fc3(x)\n","        return x\n","\n","\n","# Creamos una instancia del modelo\n","\n","# Obtenemos el tamaño de la entrada de la red basandonos en el número de palabras (columnas)\n","# en los datos de entrenamiento\n","input_size = X_train_tensor.shape[1]\n","\n","# Inicializamos la red con la arquitectura y tamaños de capa especificados\n","model = Net(input_size)\n","\n","# Las función de pérdida que usaremos para evaluar será MSE\n","criterion = nn.MSELoss()  # For regression\n","# Definimos el optimizador, con el que se ajustarán los pesos de la red durante el entrenamiento\n","optimizer = torch.optim.Adam(model.parameters(), lr=0.1)\n","\n","# Entrenamos el modelo\n","# Las épocas de entrenamiento son las veces que se pasa el conjunto de datos a través de la red\n","epochs = 5\n","# Iteramos para cada lote en cada éopca\n","for epoch in range(epochs):\n","    for batch_idx, (data, target) in enumerate(train_loader):\n","        #Reiniciamos los gradientes calculados en la iteracion anterior\n","        optimizer.zero_grad()\n","        #Obtenemos las predicciones del lote actual\n","        output = model(data)\n","        #Calculamos el error (loss) entre las predicciones y los valores reales\n","        loss = criterion(output, target.unsqueeze(1))\n","        #Calculamos los gradientes de pérdida con respecto a los pesos de la red\n","        loss.backward()\n","        #Actualizamos los pesos de la red con los gradientes calculados para minimizar la pérdida\n","        optimizer.step()"],"metadata":{"id":"ldAQZ4Qm_R-w","executionInfo":{"status":"ok","timestamp":1734366288265,"user_tz":-60,"elapsed":1772,"user":{"displayName":"CLARA MORENO MARTÍNEZ","userId":"03285449096225219779"}}},"execution_count":23,"outputs":[]},{"cell_type":"code","source":["# Realizar predicciones en el conjunto de test\n","with torch.no_grad():  # Desactivar el cálculo de gradientes durante la predicción\n","    X_test_tensor = torch.tensor(X_test, dtype=torch.float32)\n","    y_pred = model(X_test_tensor)\n","\n","# Convertir las predicciones a un array NumPy\n","y_pred_np = y_pred.cpu().numpy().flatten()  # Convertir a NumPy y aplanar\n","\n","# Calcular el error cuadrático medio (MSE)\n","mse_peor = mean_squared_error(y_test, y_pred_np)\n","print(\"Error cuadrático medio (MSE):\", mse_peor)\n","\n","# Calcular el R-cuadrado\n","r2_peor = r2_score(y_test, y_pred_np)\n","print(\"R-cuadrado:\", r2_peor)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1734366290268,"user_tz":-60,"elapsed":250,"user":{"displayName":"CLARA MORENO MARTÍNEZ","userId":"03285449096225219779"}},"outputId":"5a13af2d-0b20-4000-89a2-7e39b49b0829","id":"9LHiXlkq_R-x"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["Error cuadrático medio (MSE): 6.106352504606872\n","R-cuadrado: -2.7136664155750316\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-24-817ef9bf0290>:3: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n","  X_test_tensor = torch.tensor(X_test, dtype=torch.float32)\n"]}]},{"cell_type":"markdown","source":["###***AUMENTAMOS LAS ÉPOCAS***\n","\n","**Número de épocas = 20**\n","\n","**Tamaño de batch = 128**\n","\n","**Learning Rate = 0.1**"],"metadata":{"id":"8CDrekZ8ALTZ"}},{"cell_type":"code","source":["# Creamos TensorDataset (combina características y etiquetas en un único objeto)\n","# y DataLoader (proporciona lotes de datos de un tamaño específico (batch_size))\n","train_dataset = TensorDataset(X_train_tensor, y_train_tensor)\n","train_loader = DataLoader(train_dataset, batch_size=128, shuffle=True)\n","\n","\n","# Define the neural network model\n","class Net(nn.Module):\n","    # Inicialización capas de la red (3)\n","    def __init__(self, input_size):\n","        super(Net, self).__init__()\n","        # En cada capa se reducen las dimensiones a 128, 64, y 1\n","        # Esto ayuda a aprender representaciones más abstractas de los datos a medida que se avanza a través de las capas\n","        # 128 y 64 son valores comunes para redes pequeñas\n","        # 1: la capa de salida tiene solo 1 neurona porque estamos prediciendo un valor continuo (rating receta)\n","        self.fc1 = nn.Linear(input_size, 128)\n","        self.fc2 = nn.Linear(128, 64)\n","        self.fc3 = nn.Linear(64, 1)\n","\n","    # Definimos cómo fluyen los datos a través de las capas: hacia adelante\n","    # Funcion de activacion ReLU (Rectified Linear Unit) que se aplica a la salida de una capa\n","    # antes de pasarla a la sigueinte capa\n","    def forward(self, x):\n","        x = F.relu(self.fc1(x))\n","        x = F.relu(self.fc2(x))\n","        x = self.fc3(x)\n","        return x\n","\n","\n","# Creamos una instancia del modelo\n","\n","# Obtenemos el tamaño de la entrada de la red basandonos en el número de palabras (columnas)\n","# en los datos de entrenamiento\n","input_size = X_train_tensor.shape[1]\n","\n","# Inicializamos la red con la arquitectura y tamaños de capa especificados\n","model = Net(input_size)\n","\n","# Las función de pérdida que usaremos para evaluar será MSE\n","criterion = nn.MSELoss()  # For regression\n","# Definimos el optimizador, con el que se ajustarán los pesos de la red durante el entrenamiento\n","optimizer = torch.optim.Adam(model.parameters(), lr=0.1)\n","\n","# Entrenamos el modelo\n","# Las épocas de entrenamiento son las veces que se pasa el conjunto de datos a través de la red\n","epochs = 20\n","# Iteramos para cada lote en cada éopca\n","for epoch in range(epochs):\n","    for batch_idx, (data, target) in enumerate(train_loader):\n","        #Reiniciamos los gradientes calculados en la iteracion anterior\n","        optimizer.zero_grad()\n","        #Obtenemos las predicciones del lote actual\n","        output = model(data)\n","        #Calculamos el error (loss) entre las predicciones y los valores reales\n","        loss = criterion(output, target.unsqueeze(1))\n","        #Calculamos los gradientes de pérdida con respecto a los pesos de la red\n","        loss.backward()\n","        #Actualizamos los pesos de la red con los gradientes calculados para minimizar la pérdida\n","        optimizer.step()"],"metadata":{"id":"PK8BrL61ALTa"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Realizar predicciones en el conjunto de test\n","with torch.no_grad():  # Desactivar el cálculo de gradientes durante la predicción\n","    X_test_tensor = torch.tensor(X_test, dtype=torch.float32)\n","    y_pred = model(X_test_tensor)\n","\n","# Convertir las predicciones a un array NumPy\n","y_pred_np = y_pred.cpu().numpy().flatten()\n","\n","# Calcular el error cuadrático medio (MSE)\n","mse_epocas = mean_squared_error(y_test, y_pred_np)\n","print(\"Error cuadrático medio (MSE):\", mse_epocas)\n","\n","# Calcular el R-cuadrado\n","r2_epocas = r2_score(y_test, y_pred_np)\n","print(\"R-cuadrado:\", r2_epocas)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1734365077653,"user_tz":-60,"elapsed":7,"user":{"displayName":"CLARA MORENO MARTÍNEZ","userId":"03285449096225219779"}},"outputId":"ec050275-caab-44bd-cf58-0c1e2eb33da4","id":"SFc5Ub9bALTb"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Error cuadrático medio (MSE): 1.7829352489142765\n","R-cuadrado: -0.0843178067500272\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-9-ad507bc75eb3>:3: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n","  X_test_tensor = torch.tensor(X_test, dtype=torch.float32)\n"]}]},{"cell_type":"markdown","source":["###***REDUCIMOS EL TAMAÑO DE BATCH***\n","\n","**Número de épocas = 5**\n","\n","**Tamaño de batch = 32**\n","\n","**Learning Rate = 0.1**"],"metadata":{"id":"ycP_NZr3BCfk"}},{"cell_type":"code","source":["# Creamos TensorDataset (combina características y etiquetas en un único objeto)\n","# y DataLoader (proporciona lotes de datos de un tamaño específico (batch_size))\n","train_dataset = TensorDataset(X_train_tensor, y_train_tensor)\n","train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)\n","\n","\n","# Define the neural network model\n","class Net(nn.Module):\n","    # Inicialización capas de la red (3)\n","    def __init__(self, input_size):\n","        super(Net, self).__init__()\n","        # En cada capa se reducen las dimensiones a 128, 64, y 1\n","        # Esto ayuda a aprender representaciones más abstractas de los datos a medida que se avanza a través de las capas\n","        # 128 y 64 son valores comunes para redes pequeñas\n","        # 1: la capa de salida tiene solo 1 neurona porque estamos prediciendo un valor continuo (rating receta)\n","        self.fc1 = nn.Linear(input_size, 128)\n","        self.fc2 = nn.Linear(128, 64)\n","        self.fc3 = nn.Linear(64, 1)\n","\n","    # Definimos cómo fluyen los datos a través de las capas: hacia adelante\n","    # Funcion de activacion ReLU (Rectified Linear Unit) que se aplica a la salida de una capa\n","    # antes de pasarla a la sigueinte capa\n","    def forward(self, x):\n","        x = F.relu(self.fc1(x))\n","        x = F.relu(self.fc2(x))\n","        x = self.fc3(x)\n","        return x\n","\n","\n","# Creamos una instancia del modelo\n","\n","# Obtenemos el tamaño de la entrada de la red basandonos en el número de palabras (columnas)\n","# en los datos de entrenamiento\n","input_size = X_train_tensor.shape[1]\n","\n","# Inicializamos la red con la arquitectura y tamaños de capa especificados\n","model = Net(input_size)\n","\n","# Las función de pérdida que usaremos para evaluar será MSE\n","criterion = nn.MSELoss()  # For regression\n","# Definimos el optimizador, con el que se ajustarán los pesos de la red durante el entrenamiento\n","optimizer = torch.optim.Adam(model.parameters(), lr=0.1)\n","\n","# Entrenamos el modelo\n","# Las épocas de entrenamiento son las veces que se pasa el conjunto de datos a través de la red\n","epochs = 5\n","# Iteramos para cada lote en cada éopca\n","for epoch in range(epochs):\n","    for batch_idx, (data, target) in enumerate(train_loader):\n","        #Reiniciamos los gradientes calculados en la iteracion anterior\n","        optimizer.zero_grad()\n","        #Obtenemos las predicciones del lote actual\n","        output = model(data)\n","        #Calculamos el error (loss) entre las predicciones y los valores reales\n","        loss = criterion(output, target.unsqueeze(1))\n","        #Calculamos los gradientes de pérdida con respecto a los pesos de la red\n","        loss.backward()\n","        #Actualizamos los pesos de la red con los gradientes calculados para minimizar la pérdida\n","        optimizer.step()"],"metadata":{"id":"edlHcUvrBCfl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Realizar predicciones en el conjunto de test\n","with torch.no_grad():  # Desactivar el cálculo de gradientes durante la predicción\n","    X_test_tensor = torch.tensor(X_test, dtype=torch.float32)\n","    y_pred = model(X_test_tensor)\n","\n","# Convertir las predicciones a un array NumPy\n","y_pred_np = y_pred.cpu().numpy().flatten()  # Convertir a NumPy y aplanar\n","\n","# Calcular el error cuadrático medio (MSE)\n","# Menor MSE = mejor rendimiento del modelo\n","mse_batch = mean_squared_error(y_test, y_pred_np)\n","print(\"Error cuadrático medio (MSE):\", mse_batch)\n","\n","# Calcular el R-cuadrado (proporción de la varianza en los ratings)\n","# Mayor R = mejor ajuste del modelo a los datos\n","r2_batch = r2_score(y_test, y_pred_np)\n","print(\"R-cuadrado:\", r2_batch)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1734342508021,"user_tz":-60,"elapsed":4,"user":{"displayName":"CLARA MORENO MARTÍNEZ","userId":"03285449096225219779"}},"outputId":"ddd86105-11b0-433b-c37b-48892ca3fdc6","id":"aEx5hqEcBCfl"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Error cuadrático medio (MSE): 1.6477267050918645\n","R-cuadrado: -0.0020887792064521182\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-11-05c84f989043>:3: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n","  X_test_tensor = torch.tensor(X_test, dtype=torch.float32)\n"]}]},{"cell_type":"markdown","source":["###***REDUCIMOS EL LEARNING RATE***\n","\n","**Número de épocas = 5**\n","\n","**Tamaño de batch = 128**\n","\n","**Learning Rate = 0.001**"],"metadata":{"id":"KQuS-_bSBmN8"}},{"cell_type":"code","source":["# Creamos TensorDataset (combina características y etiquetas en un único objeto)\n","# y DataLoader (proporciona lotes de datos de un tamaño específico (batch_size))\n","train_dataset = TensorDataset(X_train_tensor, y_train_tensor)\n","train_loader = DataLoader(train_dataset, batch_size=128, shuffle=True)\n","\n","\n","# Define the neural network model\n","class Net(nn.Module):\n","    # Inicialización capas de la red (3)\n","    def __init__(self, input_size):\n","        super(Net, self).__init__()\n","        # En cada capa se reducen las dimensiones a 128, 64, y 1\n","        # Esto ayuda a aprender representaciones más abstractas de los datos a medida que se avanza a través de las capas\n","        # 128 y 64 son valores comunes para redes pequeñas\n","        # 1: la capa de salida tiene solo 1 neurona porque estamos prediciendo un valor continuo (rating receta)\n","        self.fc1 = nn.Linear(input_size, 128)\n","        self.fc2 = nn.Linear(128, 64)\n","        self.fc3 = nn.Linear(64, 1)\n","\n","    # Definimos cómo fluyen los datos a través de las capas: hacia adelante\n","    # Funcion de activacion ReLU (Rectified Linear Unit) que se aplica a la salida de una capa\n","    # antes de pasarla a la sigueinte capa\n","    def forward(self, x):\n","        x = F.relu(self.fc1(x))\n","        x = F.relu(self.fc2(x))\n","        x = self.fc3(x)\n","        return x\n","\n","\n","# Creamos una instancia del modelo\n","\n","# Obtenemos el tamaño de la entrada de la red basandonos en el número de palabras (columnas)\n","# en los datos de entrenamiento\n","input_size = X_train_tensor.shape[1]\n","\n","# Inicializamos la red con la arquitectura y tamaños de capa especificados\n","model = Net(input_size)\n","\n","# Las función de pérdida que usaremos para evaluar será MSE\n","criterion = nn.MSELoss()  # For regression\n","# Definimos el optimizador, con el que se ajustarán los pesos de la red durante el entrenamiento\n","optimizer = torch.optim.Adam(model.parameters(), lr=0.001)\n","\n","# Entrenamos el modelo\n","# Las épocas de entrenamiento son las veces que se pasa el conjunto de datos a través de la red\n","epochs = 5\n","# Iteramos para cada lote en cada éopca\n","for epoch in range(epochs):\n","    for batch_idx, (data, target) in enumerate(train_loader):\n","        #Reiniciamos los gradientes calculados en la iteracion anterior\n","        optimizer.zero_grad()\n","        #Obtenemos las predicciones del lote actual\n","        output = model(data)\n","        #Calculamos el error (loss) entre las predicciones y los valores reales\n","        loss = criterion(output, target.unsqueeze(1))\n","        #Calculamos los gradientes de pérdida con respecto a los pesos de la red\n","        loss.backward()\n","        #Actualizamos los pesos de la red con los gradientes calculados para minimizar la pérdida\n","        optimizer.step()"],"metadata":{"id":"pNrn4WVKBmN8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Realizar predicciones en el conjunto de test\n","with torch.no_grad():  # Desactivar el cálculo de gradientes durante la predicción\n","    X_test_tensor = torch.tensor(X_test, dtype=torch.float32)\n","    y_pred = model(X_test_tensor)\n","\n","# Convertir las predicciones a un array NumPy\n","y_pred_np = y_pred.cpu().numpy().flatten()\n","\n","# Calcular el error cuadrático medio (MSE)\n","mse_lr = mean_squared_error(y_test, y_pred_np)\n","print(\"Error cuadrático medio (MSE):\", mse_lr)\n","\n","# Calcular el R-cuadrado\n","r2_lr = r2_score(y_test, y_pred_np)\n","print(\"R-cuadrado:\", r2_lr)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1734342508803,"user_tz":-60,"elapsed":4,"user":{"displayName":"CLARA MORENO MARTÍNEZ","userId":"03285449096225219779"}},"outputId":"2c209fa5-42b8-481f-ddc3-d217e2f303c3","id":"wI6fmx3vBmN9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Error cuadrático medio (MSE): 1.6546985563211516\n","R-cuadrado: -0.006328811164164394\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-13-8937335e7c16>:3: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n","  X_test_tensor = torch.tensor(X_test, dtype=torch.float32)\n"]}]},{"cell_type":"markdown","source":["###***CASO MÁS LENTO, MÁS EFICIENTE***\n","\n","**Número de épocas = 20**\n","\n","**Tamaño de batch = 32**\n","\n","**Learning Rate = 0.001**"],"metadata":{"id":"0RrccERDCUsl"}},{"cell_type":"code","source":["# Creamos TensorDataset (combina características y etiquetas en un único objeto)\n","# y DataLoader (proporciona lotes de datos de un tamaño específico (batch_size))\n","train_dataset = TensorDataset(X_train_tensor, y_train_tensor)\n","train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)\n","\n","\n","# Define the neural network model\n","class Net(nn.Module):\n","    # Inicialización capas de la red (3)\n","    def __init__(self, input_size):\n","        super(Net, self).__init__()\n","        # En cada capa se reducen las dimensiones a 128, 64, y 1\n","        # Esto ayuda a aprender representaciones más abstractas de los datos a medida que se avanza a través de las capas\n","        # 128 y 64 son valores comunes para redes pequeñas\n","        # 1: la capa de salida tiene solo 1 neurona porque estamos prediciendo un valor continuo (rating receta)\n","        self.fc1 = nn.Linear(input_size, 128)\n","        self.fc2 = nn.Linear(128, 64)\n","        self.fc3 = nn.Linear(64, 1)\n","\n","    # Definimos cómo fluyen los datos a través de las capas: hacia adelante\n","    # Funcion de activacion ReLU (Rectified Linear Unit) que se aplica a la salida de una capa\n","    # antes de pasarla a la sigueinte capa\n","    def forward(self, x):\n","        x = F.relu(self.fc1(x))\n","        x = F.relu(self.fc2(x))\n","        x = self.fc3(x)\n","        return x\n","\n","\n","# Creamos una instancia del modelo\n","\n","# Obtenemos el tamaño de la entrada de la red basandonos en el número de palabras (columnas)\n","# en los datos de entrenamiento\n","input_size = X_train_tensor.shape[1]\n","\n","# Inicializamos la red con la arquitectura y tamaños de capa especificados\n","model = Net(input_size)\n","\n","# Las función de pérdida que usaremos para evaluar será MSE\n","criterion = nn.MSELoss()  # For regression\n","# Definimos el optimizador, con el que se ajustarán los pesos de la red durante el entrenamiento\n","optimizer = torch.optim.Adam(model.parameters(), lr=0.001)\n","\n","# Entrenamos el modelo\n","# Las épocas de entrenamiento son las veces que se pasa el conjunto de datos a través de la red\n","epochs = 20\n","# Iteramos para cada lote en cada éopca\n","for epoch in range(epochs):\n","    for batch_idx, (data, target) in enumerate(train_loader):\n","        #Reiniciamos los gradientes calculados en la iteracion anterior\n","        optimizer.zero_grad()\n","        #Obtenemos las predicciones del lote actual\n","        output = model(data)\n","        #Calculamos el error (loss) entre las predicciones y los valores reales\n","        loss = criterion(output, target.unsqueeze(1))\n","        #Calculamos los gradientes de pérdida con respecto a los pesos de la red\n","        loss.backward()\n","        #Actualizamos los pesos de la red con los gradientes calculados para minimizar la pérdida\n","        optimizer.step()"],"metadata":{"id":"ZmymQIwgCUsm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Realizar predicciones en el conjunto de test\n","with torch.no_grad():  # Desactivar el cálculo de gradientes durante la predicción\n","    X_test_tensor = torch.tensor(X_test, dtype=torch.float32)\n","    y_pred = model(X_test_tensor)\n","\n","# Convertir las predicciones a un array NumPy\n","y_pred_np = y_pred.cpu().numpy().flatten()\n","\n","# Calcular el error cuadrático medio (MSE)\n","mse_mejor = mean_squared_error(y_test, y_pred_np)\n","print(\"Error cuadrático medio (MSE):\", mse_mejor)\n","\n","# Calcular el R-cuadrado\n","r2_mejor = r2_score(y_test, y_pred_np)\n","print(\"R-cuadrado:\", r2_mejor)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1734365097068,"user_tz":-60,"elapsed":5,"user":{"displayName":"CLARA MORENO MARTÍNEZ","userId":"03285449096225219779"}},"outputId":"a7eb8b70-ee87-4d01-e3f3-a865c5c51150","id":"n1IwovagCUsn"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Error cuadrático medio (MSE): 1.8081297118887572\n","R-cuadrado: -0.09964018306816302\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-11-514f39f8dcc1>:3: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n","  X_test_tensor = torch.tensor(X_test, dtype=torch.float32)\n"]}]},{"cell_type":"markdown","source":["*Comparamos gráficamente los resultados.*"],"metadata":{"id":"FADznHriH7J4"}},{"cell_type":"code","source":["mse_values = [mse_peor, mse_epocas, mse_batch, mse_lr, mse_mejor]\n","r2_values = [r2_peor, r2_epocas, r2_batch, r2_lr, r2_mejor]\n","labels = ['Caso peor', 'Más épocas', 'Menor batch', 'Menor LR', 'Caso mejor']\n","\n","\n","fig, ax1 = plt.subplots()\n","\n","# Eje MSE\n","ax1.bar(labels, mse_values, color='tab:blue', label='MSE', alpha=0.7)\n","ax1.set_ylabel('MSE', color='tab:blue')\n","ax1.tick_params(axis='y', labelcolor='tab:blue')\n","ax1.set_ylim(0, 2)\n","\n","# Eje R^2\n","ax2 = ax1.twinx()\n","ax2.plot(labels, r2_values, color='tab:red', marker='o', label='R^2')\n","ax2.set_ylabel('R^2', color='tab:red')\n","ax2.tick_params(axis='y', labelcolor='tab:red')\n","ax2.set_ylim(-0.3, 0.2)\n","\n","\n","plt.title('Comparación de MSE y R^2 para Diferentes Configuraciones (BERT)')\n","plt.xticks(rotation=45, ha='right')\n","plt.tight_layout()\n","plt.grid(True, linestyle='--', alpha=0.5)\n","\n","# Leyenda\n","lines, labels = ax1.get_legend_handles_labels()\n","lines2, labels2 = ax2.get_legend_handles_labels()\n","ax2.legend(lines + lines2, labels + labels2, loc='upper center', bbox_to_anchor=(0.5, -0.15), ncol=2)\n","\n","# Mostrar la gráfica\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":463},"id":"q60_pVXXH6rN","executionInfo":{"status":"ok","timestamp":1734342515902,"user_tz":-60,"elapsed":398,"user":{"displayName":"CLARA MORENO MARTÍNEZ","userId":"03285449096225219779"}},"outputId":"2f3d0564-5f6d-4ee7-c650-f3ca000dd14c"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 600x400 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["###***AUMENTAMOS EN 2 EL NÚMERO DE CAPAS, MEJOR CASO***\n","\n","**Número de épocas = 20**\n","\n","**Tamaño de batch = 32**\n","\n","**Learning Rate = 0.001**"],"metadata":{"id":"KBqkIECdKKbK"}},{"cell_type":"code","source":["# Creamos TensorDataset (combina características y etiquetas en un único objeto)\n","# y DataLoader (proporciona lotes de datos de un tamaño específico (batch_size))\n","train_dataset = TensorDataset(X_train_tensor, y_train_tensor)\n","train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)\n","\n","\n","# Define the neural network model\n","class Net(nn.Module):\n","    # Inicialización capas de la red (3)\n","    def __init__(self, input_size):\n","        super(Net, self).__init__()\n","        # En cada capa se reducen las dimensiones a 128, 64, y 1\n","        # Esto ayuda a aprender representaciones más abstractas de los datos a medida que se avanza a través de las capas\n","        # 128 y 64 son valores comunes para redes pequeñas\n","        # 1: la capa de salida tiene solo 1 neurona porque estamos prediciendo un valor continuo (rating receta)\n","        self.fc1 = nn.Linear(input_size, 128)\n","        self.fc2 = nn.Linear(128, 64)\n","        self.fc3 = nn.Linear(64, 32) # Nueva capa\n","        self.fc4 = nn.Linear(32, 16) # Nueva capa\n","        self.fc5 = nn.Linear(16, 1)  # Capa de salida\n","\n","    # Definimos cómo fluyen los datos a través de las capas: hacia adelante\n","    # Funcion de activacion ReLU (Rectified Linear Unit) que se aplica a la salida de una capa\n","    # antes de pasarla a la sigueinte capa\n","    def forward(self, x):\n","        x = F.relu(self.fc1(x))\n","        x = F.relu(self.fc2(x))\n","        x = F.relu(self.fc3(x))\n","        x = F.relu(self.fc4(x))\n","        x = self.fc5(x)\n","        return x\n","\n","\n","# Creamos una instancia del modelo\n","\n","# Obtenemos el tamaño de la entrada de la red basandonos en el número de palabras (columnas)\n","# en los datos de entrenamiento\n","input_size = X_train_tensor.shape[1]\n","\n","# Inicializamos la red con la arquitectura y tamaños de capa especificados\n","model = Net(input_size)\n","\n","# Las función de pérdida que usaremos para evaluar será MSE\n","criterion = nn.MSELoss()  # For regression\n","# Definimos el optimizador, con el que se ajustarán los pesos de la red durante el entrenamiento\n","optimizer = torch.optim.Adam(model.parameters(), lr=0.001)\n","\n","# Entrenamos el modelo\n","# Las épocas de entrenamiento son las veces que se pasa el conjunto de datos a través de la red\n","epochs = 20\n","# Iteramos para cada lote en cada éopca\n","for epoch in range(epochs):\n","    for batch_idx, (data, target) in enumerate(train_loader):\n","        #Reiniciamos los gradientes calculados en la iteracion anterior\n","        optimizer.zero_grad()\n","        #Obtenemos las predicciones del lote actual\n","        output = model(data)\n","        #Calculamos el error (loss) entre las predicciones y los valores reales\n","        loss = criterion(output, target.unsqueeze(1))\n","        #Calculamos los gradientes de pérdida con respecto a los pesos de la red\n","        loss.backward()\n","        #Actualizamos los pesos de la red con los gradientes calculados para minimizar la pérdida\n","        optimizer.step()"],"metadata":{"id":"emmFFZRHKcew"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Realizar predicciones en el conjunto de test\n","with torch.no_grad():  # Desactivar el cálculo de gradientes durante la predicción\n","    X_test_tensor = torch.tensor(X_test, dtype=torch.float32)\n","    y_pred = model(X_test_tensor)\n","\n","# Convertir las predicciones a un array NumPy\n","y_pred_np = y_pred.cpu().numpy().flatten()\n","\n","# Calcular el error cuadrático medio (MSE)\n","mse_capa_mejor = mean_squared_error(y_test, y_pred_np)\n","print(\"Error cuadrático medio (MSE):\", mse_capa_mejor)\n","\n","# Calcular el R-cuadrado\n","r2_capa_mejor = r2_score(y_test, y_pred_np)\n","print(\"R-cuadrado:\", r2_capa_mejor)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1734342524843,"user_tz":-60,"elapsed":4,"user":{"displayName":"CLARA MORENO MARTÍNEZ","userId":"03285449096225219779"}},"outputId":"dd54e0c1-264b-42e9-981b-7bf2ea401365","id":"TPcn3N9UKcex"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Error cuadrático medio (MSE): 1.7158681676509504\n","R-cuadrado: -0.043529993224628694\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-18-9fd60f43080f>:3: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n","  X_test_tensor = torch.tensor(X_test, dtype=torch.float32)\n"]}]},{"cell_type":"markdown","source":["###***AUMENTAMOS EN 2 EL NÚMERO DE CAPAS, PEOR CASO***\n","\n","**Número de épocas = 5**\n","\n","**Tamaño de batch = 128**\n","\n","**Learning Rate = 0.1**"],"metadata":{"id":"o3rf2a7oNc16"}},{"cell_type":"code","source":["# Creamos TensorDataset (combina características y etiquetas en un único objeto)\n","# y DataLoader (proporciona lotes de datos de un tamaño específico (batch_size))\n","train_dataset = TensorDataset(X_train_tensor, y_train_tensor)\n","train_loader = DataLoader(train_dataset, batch_size=128, shuffle=True)\n","\n","\n","# Define the neural network model\n","class Net(nn.Module):\n","    # Inicialización capas de la red (3)\n","    def __init__(self, input_size):\n","        super(Net, self).__init__()\n","        # En cada capa se reducen las dimensiones a 128, 64, y 1\n","        # Esto ayuda a aprender representaciones más abstractas de los datos a medida que se avanza a través de las capas\n","        # 128 y 64 son valores comunes para redes pequeñas\n","        # 1: la capa de salida tiene solo 1 neurona porque estamos prediciendo un valor continuo (rating receta)\n","        self.fc1 = nn.Linear(input_size, 128)\n","        self.fc2 = nn.Linear(128, 64)\n","        self.fc3 = nn.Linear(64, 32) # Nueva capa\n","        self.fc4 = nn.Linear(32, 16) # Nueva capa\n","        self.fc5 = nn.Linear(16, 1)  # Capa de salida\n","\n","    # Definimos cómo fluyen los datos a través de las capas: hacia adelante\n","    # Funcion de activacion ReLU (Rectified Linear Unit) que se aplica a la salida de una capa\n","    # antes de pasarla a la sigueinte capa\n","    def forward(self, x):\n","        x = F.relu(self.fc1(x))\n","        x = F.relu(self.fc2(x))\n","        x = F.relu(self.fc3(x))\n","        x = F.relu(self.fc4(x))\n","        x = self.fc5(x)\n","        return x\n","\n","\n","# Creamos una instancia del modelo\n","\n","# Obtenemos el tamaño de la entrada de la red basandonos en el número de palabras (columnas)\n","# en los datos de entrenamiento\n","input_size = X_train_tensor.shape[1]\n","\n","# Inicializamos la red con la arquitectura y tamaños de capa especificados\n","model = Net(input_size)\n","\n","# Las función de pérdida que usaremos para evaluar será MSE\n","criterion = nn.MSELoss()  # For regression\n","# Definimos el optimizador, con el que se ajustarán los pesos de la red durante el entrenamiento\n","optimizer = torch.optim.Adam(model.parameters(), lr=0.1)\n","\n","# Entrenamos el modelo\n","# Las épocas de entrenamiento son las veces que se pasa el conjunto de datos a través de la red\n","epochs = 5\n","# Iteramos para cada lote en cada éopca\n","for epoch in range(epochs):\n","    for batch_idx, (data, target) in enumerate(train_loader):\n","        #Reiniciamos los gradientes calculados en la iteracion anterior\n","        optimizer.zero_grad()\n","        #Obtenemos las predicciones del lote actual\n","        output = model(data)\n","        #Calculamos el error (loss) entre las predicciones y los valores reales\n","        loss = criterion(output, target.unsqueeze(1))\n","        #Calculamos los gradientes de pérdida con respecto a los pesos de la red\n","        loss.backward()\n","        #Actualizamos los pesos de la red con los gradientes calculados para minimizar la pérdida\n","        optimizer.step()"],"metadata":{"id":"FSHdAEbLNc17"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Realizar predicciones en el conjunto de test\n","with torch.no_grad():  # Desactivar el cálculo de gradientes durante la predicción\n","    X_test_tensor = torch.tensor(X_test, dtype=torch.float32)\n","    y_pred = model(X_test_tensor)\n","\n","# Convertir las predicciones a un array NumPy\n","y_pred_np = y_pred.cpu().numpy().flatten()\n","\n","# Calcular el error cuadrático medio (MSE)\n","mse_capa_peor = mean_squared_error(y_test, y_pred_np)\n","print(\"Error cuadrático medio (MSE):\", mse_capa_peor)\n","\n","# Calcular el R-cuadrado\n","r2_capa_peor = r2_score(y_test, y_pred_np)\n","print(\"R-cuadrado:\", r2_capa_peor)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1734342525775,"user_tz":-60,"elapsed":4,"user":{"displayName":"CLARA MORENO MARTÍNEZ","userId":"03285449096225219779"}},"outputId":"6793ba86-c002-4f2f-ecf4-36b74bd483c8","id":"a9kfN617Nc18"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Error cuadrático medio (MSE): 1.6527247156192646\n","R-cuadrado: -0.005128391450634373\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-20-bf30761e978c>:3: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n","  X_test_tensor = torch.tensor(X_test, dtype=torch.float32)\n"]}]},{"cell_type":"markdown","source":["*Vemos gráficamente el impacto de aumentar el número de capas.*"],"metadata":{"id":"PnxCqX0EQ9g4"}},{"cell_type":"code","source":["# Datos para la gráfica\n","mse_values = [mse_peor, mse_capa_peor, mse_mejor, mse_capa_mejor]\n","r2_values = [r2_peor, r2_capa_peor, r2_mejor, r2_capa_mejor]\n","labels = ['Peor caso', 'PC 2 capas +', 'Mejor caso', 'MC 2 capas +']\n","\n","# Crear la gráfica\n","fig, ax1 = plt.subplots()\n","\n","# Eje MSE\n","ax1.bar(labels, mse_values, color='tab:blue', label='MSE', alpha=0.7)\n","ax1.set_ylabel('MSE', color='tab:blue')\n","ax1.tick_params(axis='y', labelcolor='tab:blue')\n","ax1.set_ylim(0, 2)\n","\n","# Eje R^2\n","ax2 = ax1.twinx()\n","ax2.plot(labels, r2_values, color='tab:red', marker='o', label='R^2')\n","ax2.set_ylabel('R^2', color='tab:red')\n","ax2.tick_params(axis='y', labelcolor='tab:red')\n","ax2.set_ylim(-0.3, 0.2)\n","\n","# Ajustes adicionales\n","plt.title('Comparación de MSE y R^2 con distinto nº de capas de la red')\n","plt.xticks(rotation=45, ha='right')  # Rotar etiquetas del eje x\n","plt.tight_layout()  # Ajustar el diseño para evitar superposiciones\n","plt.grid(True, linestyle='--', alpha=0.5)\n","\n","# Mostrar leyenda\n","lines, labels = ax1.get_legend_handles_labels()\n","lines2, labels2 = ax2.get_legend_handles_labels()\n","ax2.legend(lines + lines2, labels + labels2, loc='upper center', bbox_to_anchor=(0.5, -0.15), ncol=2)\n","\n","# Mostrar la gráfica\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":463},"executionInfo":{"status":"ok","timestamp":1734342526123,"user_tz":-60,"elapsed":351,"user":{"displayName":"CLARA MORENO MARTÍNEZ","userId":"03285449096225219779"}},"outputId":"ff40334c-9a02-4ab9-a342-8aa04b1e1036","id":"f_ifcn3HQ9g5"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 600x400 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["###***100 ÉPOCAS***\n","\n","**Número de épocas = 100**\n","\n","**Tamaño de batch = 64**\n","\n","**Learning Rate = 0.01**"],"metadata":{"id":"GQWrnYz8HOpr"}},{"cell_type":"code","source":["# Creamos TensorDataset (combina características y etiquetas en un único objeto)\n","# y DataLoader (proporciona lotes de datos de un tamaño específico (batch_size))\n","train_dataset = TensorDataset(X_train_tensor, y_train_tensor)\n","train_loader = DataLoader(train_dataset, batch_size=64, shuffle=True)\n","\n","\n","# Define the neural network model\n","class Net(nn.Module):\n","    # Inicialización capas de la red (3)\n","    def __init__(self, input_size):\n","        super(Net, self).__init__()\n","        # En cada capa se reducen las dimensiones a 128, 64, y 1\n","        # Esto ayuda a aprender representaciones más abstractas de los datos a medida que se avanza a través de las capas\n","        # 128 y 64 son valores comunes para redes pequeñas\n","        # 1: la capa de salida tiene solo 1 neurona porque estamos prediciendo un valor continuo (rating receta)\n","        self.fc1 = nn.Linear(input_size, 128)\n","        self.fc2 = nn.Linear(128, 64)\n","        self.fc3 = nn.Linear(64, 1)\n","\n","    # Definimos cómo fluyen los datos a través de las capas: hacia adelante\n","    # Funcion de activacion ReLU (Rectified Linear Unit) que se aplica a la salida de una capa\n","    # antes de pasarla a la sigueinte capa\n","    def forward(self, x):\n","        x = F.relu(self.fc1(x))\n","        x = F.relu(self.fc2(x))\n","        x = self.fc3(x)\n","        return x\n","\n","\n","# Creamos una instancia del modelo\n","\n","# Obtenemos el tamaño de la entrada de la red basandonos en el número de palabras (columnas)\n","# en los datos de entrenamiento\n","input_size = X_train_tensor.shape[1]\n","\n","# Inicializamos la red con la arquitectura y tamaños de capa especificados\n","model = Net(input_size)\n","\n","# Las función de pérdida que usaremos para evaluar será MSE\n","criterion = nn.MSELoss()  # For regression\n","# Definimos el optimizador, con el que se ajustarán los pesos de la red durante el entrenamiento\n","optimizer = torch.optim.Adam(model.parameters(), lr=0.01)\n","\n","# Entrenamos el modelo\n","# Las épocas de entrenamiento son las veces que se pasa el conjunto de datos a través de la red\n","epochs = 100\n","# Iteramos para cada lote en cada éopca\n","for epoch in range(epochs):\n","    for batch_idx, (data, target) in enumerate(train_loader):\n","        #Reiniciamos los gradientes calculados en la iteracion anterior\n","        optimizer.zero_grad()\n","        #Obtenemos las predicciones del lote actual\n","        output = model(data)\n","        #Calculamos el error (loss) entre las predicciones y los valores reales\n","        loss = criterion(output, target.unsqueeze(1))\n","        #Calculamos los gradientes de pérdida con respecto a los pesos de la red\n","        loss.backward()\n","        #Actualizamos los pesos de la red con los gradientes calculados para minimizar la pérdida\n","        optimizer.step()"],"metadata":{"id":"81FH5AiUHM1U"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Realizar predicciones en el conjunto de test\n","with torch.no_grad():  # Desactivar el cálculo de gradientes durante la predicción\n","    X_test_tensor = torch.tensor(X_test, dtype=torch.float32)\n","    y_pred = model(X_test_tensor)\n","\n","# Convertir las predicciones a un array NumPy\n","y_pred_np = y_pred.cpu().numpy().flatten()\n","\n","# Calcular el error cuadrático medio (MSE)\n","mse_100 = mean_squared_error(y_test, y_pred_np)\n","print(\"Error cuadrático medio (MSE):\", mse_100)\n","\n","# Calcular el R-cuadrado\n","r2_100 = r2_score(y_test, y_pred_np)\n","print(\"R-cuadrado:\", r2_100)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1734365835960,"user_tz":-60,"elapsed":5,"user":{"displayName":"CLARA MORENO MARTÍNEZ","userId":"03285449096225219779"}},"outputId":"277df837-33e4-4005-ad27-285497cca6dd","id":"S9RvKMURHM1V"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Error cuadrático medio (MSE): 1.9319022063396347\n","R-cuadrado: -0.17491421211699243\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-13-127d219fa6aa>:3: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n","  X_test_tensor = torch.tensor(X_test, dtype=torch.float32)\n"]}]},{"cell_type":"markdown","source":["###***200 ÉPOCAS***\n","\n","**Número de épocas = 200**\n","\n","**Tamaño de batch = 64**\n","\n","**Learning Rate = 0.01**"],"metadata":{"id":"hbek5q1yLTAW"}},{"cell_type":"code","source":["# Creamos TensorDataset (combina características y etiquetas en un único objeto)\n","# y DataLoader (proporciona lotes de datos de un tamaño específico (batch_size))\n","train_dataset = TensorDataset(X_train_tensor, y_train_tensor)\n","train_loader = DataLoader(train_dataset, batch_size=64, shuffle=True)\n","\n","\n","# Define the neural network model\n","class Net(nn.Module):\n","    # Inicialización capas de la red (3)\n","    def __init__(self, input_size):\n","        super(Net, self).__init__()\n","        # En cada capa se reducen las dimensiones a 128, 64, y 1\n","        # Esto ayuda a aprender representaciones más abstractas de los datos a medida que se avanza a través de las capas\n","        # 128 y 64 son valores comunes para redes pequeñas\n","        # 1: la capa de salida tiene solo 1 neurona porque estamos prediciendo un valor continuo (rating receta)\n","        self.fc1 = nn.Linear(input_size, 128)\n","        self.fc2 = nn.Linear(128, 64)\n","        self.fc3 = nn.Linear(64, 1)\n","\n","    # Definimos cómo fluyen los datos a través de las capas: hacia adelante\n","    # Funcion de activacion ReLU (Rectified Linear Unit) que se aplica a la salida de una capa\n","    # antes de pasarla a la sigueinte capa\n","    def forward(self, x):\n","        x = F.relu(self.fc1(x))\n","        x = F.relu(self.fc2(x))\n","        x = self.fc3(x)\n","        return x\n","\n","\n","# Creamos una instancia del modelo\n","\n","# Obtenemos el tamaño de la entrada de la red basandonos en el número de palabras (columnas)\n","# en los datos de entrenamiento\n","input_size = X_train_tensor.shape[1]\n","\n","# Inicializamos la red con la arquitectura y tamaños de capa especificados\n","model = Net(input_size)\n","\n","# Las función de pérdida que usaremos para evaluar será MSE\n","criterion = nn.MSELoss()  # For regression\n","# Definimos el optimizador, con el que se ajustarán los pesos de la red durante el entrenamiento\n","optimizer = torch.optim.Adam(model.parameters(), lr=0.01)\n","\n","# Entrenamos el modelo\n","# Las épocas de entrenamiento son las veces que se pasa el conjunto de datos a través de la red\n","epochs = 200\n","# Iteramos para cada lote en cada éopca\n","for epoch in range(epochs):\n","    for batch_idx, (data, target) in enumerate(train_loader):\n","        #Reiniciamos los gradientes calculados en la iteracion anterior\n","        optimizer.zero_grad()\n","        #Obtenemos las predicciones del lote actual\n","        output = model(data)\n","        #Calculamos el error (loss) entre las predicciones y los valores reales\n","        loss = criterion(output, target.unsqueeze(1))\n","        #Calculamos los gradientes de pérdida con respecto a los pesos de la red\n","        loss.backward()\n","        #Actualizamos los pesos de la red con los gradientes calculados para minimizar la pérdida\n","        optimizer.step()"],"metadata":{"id":"gVzSY7ONLTAX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Realizar predicciones en el conjunto de test\n","with torch.no_grad():  # Desactivar el cálculo de gradientes durante la predicción\n","    X_test_tensor = torch.tensor(X_test, dtype=torch.float32)\n","    y_pred = model(X_test_tensor)\n","\n","# Convertir las predicciones a un array NumPy\n","y_pred_np = y_pred.cpu().numpy().flatten()  # Convertir a NumPy y aplanar\n","\n","# Calcular el error cuadrático medio (MSE)\n","mse_200 = mean_squared_error(y_test, y_pred_np)\n","print(\"Error cuadrático medio (MSE):\", mse_200)\n","\n","# Calcular el R-cuadrado\n","r2_200 = r2_score(y_test, y_pred_np)\n","print(\"R-cuadrado:\", r2_200)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1734365973457,"user_tz":-60,"elapsed":5,"user":{"displayName":"CLARA MORENO MARTÍNEZ","userId":"03285449096225219779"}},"outputId":"ec5d08b3-6463-43b1-945b-efd71b796099","id":"K2O_sJUSLTAY"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Error cuadrático medio (MSE): 2.2382606573193615\n","R-cuadrado: -0.3612305260986479\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-15-2768caf4b4bb>:3: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n","  X_test_tensor = torch.tensor(X_test, dtype=torch.float32)\n"]}]},{"cell_type":"markdown","source":["*Vemos gráficamente el impacto de aumentar el número de épocas a 100 y 200.*"],"metadata":{"id":"04Oa_AegP9QE"}},{"cell_type":"code","source":["# Datos para la gráfica\n","mse_values = [mse_peor, mse_epocas, mse_100, mse_200, mse_mejor]\n","r2_values = [r2_peor, r2_epocas, r2_100, r2_200, r2_mejor]\n","labels = ['Peor caso', '20 ép.', '100 ép.', '200 ép.', 'Mejor caso']\n","\n","# Crear la gráfica\n","fig, ax1 = plt.subplots()\n","\n","# Barra para MSE en el eje y izquierdo (azul)\n","ax1.bar(labels, mse_values, color='tab:blue', label='MSE', alpha=0.7)\n","ax1.set_ylabel('MSE', color='tab:blue')\n","ax1.tick_params(axis='y', labelcolor='tab:blue')\n","ax1.set_ylim(0, 2)\n","\n","# Crear un segundo eje y para R^2 (rojo)\n","ax2 = ax1.twinx()\n","ax2.plot(labels, r2_values, color='tab:red', marker='o', label='R^2')\n","ax2.set_ylabel('R^2', color='tab:red')\n","ax2.tick_params(axis='y', labelcolor='tab:red')\n","ax2.set_ylim(-0.3, 0.2)\n","\n","# Ajustes adicionales\n","plt.title('Comparación de MSE y R^2 aumentando a 100 y 200 el nº de épocas')\n","plt.xticks(rotation=45, ha='right')  # Rotar etiquetas del eje x\n","plt.tight_layout()  # Ajustar el diseño para evitar superposiciones\n","plt.grid(True, linestyle='--', alpha=0.5)\n","\n","# Mostrar leyenda\n","lines, labels = ax1.get_legend_handles_labels()\n","lines2, labels2 = ax2.get_legend_handles_labels()\n","ax2.legend(lines + lines2, labels + labels2, loc='upper center', bbox_to_anchor=(0.5, -0.15), ncol=2)\n","\n","# Mostrar la gráfica\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":463},"executionInfo":{"status":"ok","timestamp":1734366089741,"user_tz":-60,"elapsed":1112,"user":{"displayName":"CLARA MORENO MARTÍNEZ","userId":"03285449096225219779"}},"outputId":"9c511ef3-307c-4bf9-cb79-a6fe5f07e84f","id":"FajB3K17P9QF"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 600x400 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]}]}