{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"tnNI-upfEaFv"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":1,"metadata":{"id":"gOHBNVF4ud1K","executionInfo":{"status":"ok","timestamp":1734363886062,"user_tz":-60,"elapsed":5945,"user":{"displayName":"CLARA MORENO MARTÍNEZ","userId":"03285449096225219779"}}},"outputs":[],"source":["# To visualize plots in the notebook\n","%matplotlib inline\n","\n","import numpy as np\n","import pandas as pd # To read data tables from csv files\n","import matplotlib.pyplot as plt # To plot the figures\n","from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score, roc_curve, auc\n","\n","import os\n","from termcolor import colored\n","import tqdm\n","import scipy\n","import gc\n","import joblib\n","\n","# For plots and graphical results\n","import matplotlib.pyplot as plt\n","from mpl_toolkits.mplot3d import Axes3D\n","import pylab\n","\n","# That's default image size for this interactive session\n","pylab.rcParams['figure.figsize'] = 6, 4"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":19389,"status":"ok","timestamp":1734364157810,"user":{"displayName":"CLARA MORENO MARTÍNEZ","userId":"03285449096225219779"},"user_tz":-60},"id":"6uqSUk2IJ9pq","outputId":"c6c5bb2c-635a-4aa5-dee8-73de0f42fd9d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n","Tamaño de los embeddings: (20130, 100)\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n","# Cargar los datos desde el archivo JSON\n","data_path = '/content/drive/My Drive/proyecto/full_format_recipes.json'  # Clara\n","#data_path = '/content/drive/My Drive/Colab Notebooks/proyecto/full_format_recipes.json'  # Jorge\n","recipes_df = pd.read_json(data_path)\n","\n","# Cargar los embeddings desde el archivo guardado\n","w2v_directions = np.load('/content/drive/My Drive/proyecto/w2v_embeddings.npy')\n","\n","# Verifica el tamaño de los embeddings cargados\n","print(f\"Tamaño de los embeddings: {w2v_directions.shape}\")"]},{"cell_type":"markdown","metadata":{"id":"pzlkBJx5NAIJ"},"source":["### **1. Preparación de los datos de entrenamiento y de test**"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3,"status":"ok","timestamp":1734364157810,"user":{"displayName":"CLARA MORENO MARTÍNEZ","userId":"03285449096225219779"},"user_tz":-60},"id":"TQPTCvW9NAYv","outputId":"ef5decf7-dd75-43cd-8a56-5556c65e6609"},"outputs":[{"output_type":"stream","name":"stdout","text":["0.0\n","5.0\n"]}],"source":["from re import X\n","import numpy as np\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler\n","\n","target = recipes_df['rating']\n","print(min(target)) #0\n","print(max(target)) #5\n","target = target.fillna(target.mean()) # Relleno los valores que faltan (NaN) con media\n","# Convertimos el target en variable categórica (valores 0 o 1)\n","# Dividimos los datos en conjunto de entrenamiento y de test, features (X) y labels (y)\n","\n","X_train, X_test, y_train, y_test = train_test_split(w2v_directions, target, test_size=0.2, random_state=42)"]},{"cell_type":"markdown","source":["### **2. Entrenamiento y evaluación**"],"metadata":{"id":"4g5aWeS6UfGH"}},{"cell_type":"markdown","source":["#### ***Red neuronal con PyTorch***"],"metadata":{"id":"Uvq0F0QjUQXt"}},{"cell_type":"code","source":["import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","from torch.utils.data import TensorDataset, DataLoader\n","\n","from sklearn.metrics import mean_squared_error, r2_score"],"metadata":{"id":"VGqfeFCGo7vk","executionInfo":{"status":"ok","timestamp":1734364167787,"user_tz":-60,"elapsed":4515,"user":{"displayName":"CLARA MORENO MARTÍNEZ","userId":"03285449096225219779"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["# Convertimos los datos a tensores de PyTorch\n","X_train_tensor = torch.tensor(X_train, dtype=torch.float32)\n","X_test_tensor = torch.tensor(X_test, dtype=torch.float32)\n","\n","y_train_tensor = torch.tensor(y_train.values, dtype=torch.float32)\n","y_test_tensor = torch.tensor(y_test.values, dtype=torch.float32)"],"metadata":{"id":"0At8tQMVo_VD","executionInfo":{"status":"ok","timestamp":1734364167788,"user_tz":-60,"elapsed":3,"user":{"displayName":"CLARA MORENO MARTÍNEZ","userId":"03285449096225219779"}}},"execution_count":6,"outputs":[]},{"cell_type":"markdown","source":["###***CASO MÁS RÁPIDO, MENOS EFICIENTE***\n","\n","**Número de épocas = 5**\n","\n","**Tamaño de batch = 128**\n","\n","**Learning Rate = 0.1**"],"metadata":{"id":"KAVVHMb--Xwq"}},{"cell_type":"code","source":["# Creamos TensorDataset (combina características y etiquetas en un único objeto)\n","# y DataLoader (proporciona lotes de datos de un tamaño específico (batch_size))\n","train_dataset = TensorDataset(X_train_tensor, y_train_tensor)\n","train_loader = DataLoader(train_dataset, batch_size=128, shuffle=True)\n","\n","\n","# Define the neural network model\n","class Net(nn.Module):\n","    # Inicialización capas de la red (3)\n","    def __init__(self, input_size):\n","        super(Net, self).__init__()\n","        # En cada capa se reducen las dimensiones a 128, 64, y 1\n","        # Esto ayuda a aprender representaciones más abstractas de los datos a medida que se avanza a través de las capas\n","        # 128 y 64 son valores comunes para redes pequeñas\n","        # 1: la capa de salida tiene solo 1 neurona porque estamos prediciendo un valor continuo (rating receta)\n","        self.fc1 = nn.Linear(input_size, 128)\n","        self.fc2 = nn.Linear(128, 64)\n","        self.fc3 = nn.Linear(64, 1)\n","\n","    # Definimos cómo fluyen los datos a través de las capas: hacia adelante\n","    # Funcion de activacion ReLU (Rectified Linear Unit) que se aplica a la salida de una capa\n","    # antes de pasarla a la sigueinte capa\n","    def forward(self, x):\n","        x = F.relu(self.fc1(x))\n","        x = F.relu(self.fc2(x))\n","        x = self.fc3(x)\n","        return x\n","\n","\n","# Creamos una instancia del modelo\n","\n","# Obtenemos el tamaño de la entrada de la red basandonos en el número de palabras (columnas)\n","# en los datos de entrenamiento\n","input_size = X_train_tensor.shape[1]\n","\n","# Inicializamos la red con la arquitectura y tamaños de capa especificados\n","model = Net(input_size)\n","\n","# Las función de pérdida que usaremos para evaluar será MSE\n","criterion = nn.MSELoss()  # For regression\n","# Definimos el optimizador, con el que se ajustarán los pesos de la red durante el entrenamiento\n","optimizer = torch.optim.Adam(model.parameters(), lr=0.1)\n","\n","# Entrenamos el modelo\n","# Las épocas de entrenamiento son las veces que se pasa el conjunto de datos a través de la red\n","epochs = 5\n","# Iteramos para cada lote en cada éopca\n","for epoch in range(epochs):\n","    for batch_idx, (data, target) in enumerate(train_loader):\n","        #Reiniciamos los gradientes calculados en la iteracion anterior\n","        optimizer.zero_grad()\n","        #Obtenemos las predicciones del lote actual\n","        output = model(data)\n","        #Calculamos el error (loss) entre las predicciones y los valores reales\n","        loss = criterion(output, target.unsqueeze(1))\n","        #Calculamos los gradientes de pérdida con respecto a los pesos de la red\n","        loss.backward()\n","        #Actualizamos los pesos de la red con los gradientes calculados para minimizar la pérdida\n","        optimizer.step()"],"metadata":{"id":"ldAQZ4Qm_R-w","executionInfo":{"status":"ok","timestamp":1734364175944,"user_tz":-60,"elapsed":7391,"user":{"displayName":"CLARA MORENO MARTÍNEZ","userId":"03285449096225219779"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["# Realizamos predicciones en el conjunto de test\n","with torch.no_grad():  # Desactivar el cálculo de gradientes durante la predicción\n","    X_test_tensor = torch.tensor(X_test, dtype=torch.float32)\n","    y_pred = model(X_test_tensor)\n","\n","# Convertir las predicciones a un array NumPy\n","y_pred_np = y_pred.cpu().numpy().flatten()  # Convertir a NumPy y aplanar\n","\n","# Calcular el error cuadrático medio (MSE)\n","mse_peor = mean_squared_error(y_test, y_pred_np)\n","print(\"Error cuadrático medio (MSE):\", mse_peor)\n","\n","# Calcular el R-cuadrado\n","r2_peor = r2_score(y_test, y_pred_np)\n","print(\"R-cuadrado:\", r2_peor)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1734364175945,"user_tz":-60,"elapsed":4,"user":{"displayName":"CLARA MORENO MARTÍNEZ","userId":"03285449096225219779"}},"outputId":"564f4bb1-84eb-4dfa-a556-43d035509dd9","id":"9LHiXlkq_R-x"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Error cuadrático medio (MSE): 1.613773659164139\n","R-cuadrado: 0.10571493303807855\n"]}]},{"cell_type":"markdown","source":["###***AUMENTAMOS LAS ÉPOCAS***\n","\n","**Número de épocas = 20**\n","\n","**Tamaño de batch = 128**\n","\n","**Learning Rate = 0.1**"],"metadata":{"id":"8CDrekZ8ALTZ"}},{"cell_type":"code","source":["# Creamos TensorDataset (combina características y etiquetas en un único objeto)\n","# y DataLoader (proporciona lotes de datos de un tamaño específico (batch_size))\n","train_dataset = TensorDataset(X_train_tensor, y_train_tensor)\n","train_loader = DataLoader(train_dataset, batch_size=128, shuffle=True)\n","\n","\n","# Define the neural network model\n","class Net(nn.Module):\n","    # Inicialización capas de la red (3)\n","    def __init__(self, input_size):\n","        super(Net, self).__init__()\n","        # En cada capa se reducen las dimensiones a 128, 64, y 1\n","        # Esto ayuda a aprender representaciones más abstractas de los datos a medida que se avanza a través de las capas\n","        # 128 y 64 son valores comunes para redes pequeñas\n","        # 1: la capa de salida tiene solo 1 neurona porque estamos prediciendo un valor continuo (rating receta)\n","        self.fc1 = nn.Linear(input_size, 128)\n","        self.fc2 = nn.Linear(128, 64)\n","        self.fc3 = nn.Linear(64, 1)\n","\n","    # Definimos cómo fluyen los datos a través de las capas: hacia adelante\n","    # Funcion de activacion ReLU (Rectified Linear Unit) que se aplica a la salida de una capa\n","    # antes de pasarla a la sigueinte capa\n","    def forward(self, x):\n","        x = F.relu(self.fc1(x))\n","        x = F.relu(self.fc2(x))\n","        x = self.fc3(x)\n","        return x\n","\n","\n","# Creamos una instancia del modelo\n","\n","# Obtenemos el tamaño de la entrada de la red basandonos en el número de palabras (columnas)\n","# en los datos de entrenamiento\n","input_size = X_train_tensor.shape[1]\n","\n","# Inicializamos la red con la arquitectura y tamaños de capa especificados\n","model = Net(input_size)\n","\n","# Las función de pérdida que usaremos para evaluar será MSE\n","criterion = nn.MSELoss()  # For regression\n","# Definimos el optimizador, con el que se ajustarán los pesos de la red durante el entrenamiento\n","optimizer = torch.optim.Adam(model.parameters(), lr=0.1)\n","\n","# Entrenamos el modelo\n","# Las épocas de entrenamiento son las veces que se pasa el conjunto de datos a través de la red\n","epochs = 20\n","# Iteramos para cada lote en cada éopca\n","for epoch in range(epochs):\n","    for batch_idx, (data, target) in enumerate(train_loader):\n","        #Reiniciamos los gradientes calculados en la iteracion anterior\n","        optimizer.zero_grad()\n","        #Obtenemos las predicciones del lote actual\n","        output = model(data)\n","        #Calculamos el error (loss) entre las predicciones y los valores reales\n","        loss = criterion(output, target.unsqueeze(1))\n","        #Calculamos los gradientes de pérdida con respecto a los pesos de la red\n","        loss.backward()\n","        #Actualizamos los pesos de la red con los gradientes calculados para minimizar la pérdida\n","        optimizer.step()"],"metadata":{"id":"PK8BrL61ALTa","executionInfo":{"status":"ok","timestamp":1734364185876,"user_tz":-60,"elapsed":9934,"user":{"displayName":"CLARA MORENO MARTÍNEZ","userId":"03285449096225219779"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["with torch.no_grad():  # Desactivar el cálculo de gradientes durante la predicción\n","    X_test_tensor = torch.tensor(X_test, dtype=torch.float32) # X_test is already a NumPy array\n","    y_pred = model(X_test_tensor)\n","\n","# Convertir las predicciones a un array NumPy\n","y_pred_np = y_pred.cpu().numpy().flatten()\n","\n","# Calcular el error cuadrático medio (MSE)\n","mse_epocas = mean_squared_error(y_test, y_pred_np)\n","print(\"Error cuadrático medio (MSE):\", mse_epocas)\n","\n","# Calcular el R-cuadrado\n","r2_epocas = r2_score(y_test, y_pred_np)\n","print(\"R-cuadrado:\", r2_epocas)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1734364185876,"user_tz":-60,"elapsed":4,"user":{"displayName":"CLARA MORENO MARTÍNEZ","userId":"03285449096225219779"}},"outputId":"5dbabb25-2bb2-4502-a2aa-f6bf7b3fd666","id":"SFc5Ub9bALTb"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Error cuadrático medio (MSE): 1.777289981220576\n","R-cuadrado: 0.015101107369769773\n"]}]},{"cell_type":"markdown","source":["###***REDUCIMOS EL TAMAÑO DE BATCH***\n","\n","**Número de épocas = 5**\n","\n","**Tamaño de batch = 32**\n","\n","**Learning Rate = 0.1**"],"metadata":{"id":"ycP_NZr3BCfk"}},{"cell_type":"code","source":["# Creamos TensorDataset (combina características y etiquetas en un único objeto)\n","# y DataLoader (proporciona lotes de datos de un tamaño específico (batch_size))\n","train_dataset = TensorDataset(X_train_tensor, y_train_tensor)\n","train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)\n","\n","\n","# Define the neural network model\n","class Net(nn.Module):\n","    # Inicialización capas de la red (3)\n","    def __init__(self, input_size):\n","        super(Net, self).__init__()\n","        # En cada capa se reducen las dimensiones a 128, 64, y 1\n","        # Esto ayuda a aprender representaciones más abstractas de los datos a medida que se avanza a través de las capas\n","        # 128 y 64 son valores comunes para redes pequeñas\n","        # 1: la capa de salida tiene solo 1 neurona porque estamos prediciendo un valor continuo (rating receta)\n","        self.fc1 = nn.Linear(input_size, 128)\n","        self.fc2 = nn.Linear(128, 64)\n","        self.fc3 = nn.Linear(64, 1)\n","\n","    # Definimos cómo fluyen los datos a través de las capas: hacia adelante\n","    # Funcion de activacion ReLU (Rectified Linear Unit) que se aplica a la salida de una capa\n","    # antes de pasarla a la sigueinte capa\n","    def forward(self, x):\n","        x = F.relu(self.fc1(x))\n","        x = F.relu(self.fc2(x))\n","        x = self.fc3(x)\n","        return x\n","\n","\n","# Creamos una instancia del modelo\n","\n","# Obtenemos el tamaño de la entrada de la red basandonos en el número de palabras (columnas)\n","# en los datos de entrenamiento\n","input_size = X_train_tensor.shape[1]\n","\n","# Inicializamos la red con la arquitectura y tamaños de capa especificados\n","model = Net(input_size)\n","\n","# Las función de pérdida que usaremos para evaluar será MSE\n","criterion = nn.MSELoss()  # For regression\n","# Definimos el optimizador, con el que se ajustarán los pesos de la red durante el entrenamiento\n","optimizer = torch.optim.Adam(model.parameters(), lr=0.1)\n","\n","# Entrenamos el modelo\n","# Las épocas de entrenamiento son las veces que se pasa el conjunto de datos a través de la red\n","epochs = 5\n","# Iteramos para cada lote en cada éopca\n","for epoch in range(epochs):\n","    for batch_idx, (data, target) in enumerate(train_loader):\n","        #Reiniciamos los gradientes calculados en la iteracion anterior\n","        optimizer.zero_grad()\n","        #Obtenemos las predicciones del lote actual\n","        output = model(data)\n","        #Calculamos el error (loss) entre las predicciones y los valores reales\n","        loss = criterion(output, target.unsqueeze(1))\n","        #Calculamos los gradientes de pérdida con respecto a los pesos de la red\n","        loss.backward()\n","        #Actualizamos los pesos de la red con los gradientes calculados para minimizar la pérdida\n","        optimizer.step()"],"metadata":{"id":"edlHcUvrBCfl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Realizar predicciones en el conjunto de test\n","with torch.no_grad():  # Desactivar el cálculo de gradientes durante la predicción\n","    X_test_tensor = torch.tensor(X_test, dtype=torch.float32) # X_test is already a NumPy array\n","    y_pred = model(X_test_tensor)\n","\n","# Convertir las predicciones a un array NumPy\n","y_pred_np = y_pred.cpu().numpy().flatten()\n","\n","# Calcular el error cuadrático medio (MSE)\n","mse_batch = mean_squared_error(y_test, y_pred_np)\n","print(\"Error cuadrático medio (MSE):\", mse_batch)\n","\n","# Calcular el R-cuadrado\n","r2_batch = r2_score(y_test, y_pred_np)\n","print(\"R-cuadrado:\", r2_batch)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1734341816033,"user_tz":-60,"elapsed":4,"user":{"displayName":"CLARA MORENO MARTÍNEZ","userId":"03285449096225219779"}},"outputId":"cdccda4f-f816-4905-f0a1-9ebcb6fe28e2","id":"aEx5hqEcBCfl"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Error cuadrático medio (MSE): 1.80566839021176\n","R-cuadrado: -0.0006250059180743506\n"]}]},{"cell_type":"markdown","source":["###***REDUCIMOS EL LEARNING RATE***\n","\n","**Número de épocas = 5**\n","\n","**Tamaño de batch = 128**\n","\n","**Learning Rate = 0.001**"],"metadata":{"id":"KQuS-_bSBmN8"}},{"cell_type":"code","source":["# Creamos TensorDataset (combina características y etiquetas en un único objeto)\n","# y DataLoader (proporciona lotes de datos de un tamaño específico (batch_size))\n","train_dataset = TensorDataset(X_train_tensor, y_train_tensor)\n","train_loader = DataLoader(train_dataset, batch_size=128, shuffle=True)\n","\n","\n","# Define the neural network model\n","class Net(nn.Module):\n","    # Inicialización capas de la red (3)\n","    def __init__(self, input_size):\n","        super(Net, self).__init__()\n","        # En cada capa se reducen las dimensiones a 128, 64, y 1\n","        # Esto ayuda a aprender representaciones más abstractas de los datos a medida que se avanza a través de las capas\n","        # 128 y 64 son valores comunes para redes pequeñas\n","        # 1: la capa de salida tiene solo 1 neurona porque estamos prediciendo un valor continuo (rating receta)\n","        self.fc1 = nn.Linear(input_size, 128)\n","        self.fc2 = nn.Linear(128, 64)\n","        self.fc3 = nn.Linear(64, 1)\n","\n","    # Definimos cómo fluyen los datos a través de las capas: hacia adelante\n","    # Funcion de activacion ReLU (Rectified Linear Unit) que se aplica a la salida de una capa\n","    # antes de pasarla a la sigueinte capa\n","    def forward(self, x):\n","        x = F.relu(self.fc1(x))\n","        x = F.relu(self.fc2(x))\n","        x = self.fc3(x)\n","        return x\n","\n","\n","# Creamos una instancia del modelo\n","\n","# Obtenemos el tamaño de la entrada de la red basandonos en el número de palabras (columnas)\n","# en los datos de entrenamiento\n","input_size = X_train_tensor.shape[1]\n","\n","# Inicializamos la red con la arquitectura y tamaños de capa especificados\n","model = Net(input_size)\n","\n","# Las función de pérdida que usaremos para evaluar será MSE\n","criterion = nn.MSELoss()  # For regression\n","# Definimos el optimizador, con el que se ajustarán los pesos de la red durante el entrenamiento\n","optimizer = torch.optim.Adam(model.parameters(), lr=0.001)\n","\n","# Entrenamos el modelo\n","# Las épocas de entrenamiento son las veces que se pasa el conjunto de datos a través de la red\n","epochs = 5\n","# Iteramos para cada lote en cada éopca\n","for epoch in range(epochs):\n","    for batch_idx, (data, target) in enumerate(train_loader):\n","        #Reiniciamos los gradientes calculados en la iteracion anterior\n","        optimizer.zero_grad()\n","        #Obtenemos las predicciones del lote actual\n","        output = model(data)\n","        #Calculamos el error (loss) entre las predicciones y los valores reales\n","        loss = criterion(output, target.unsqueeze(1))\n","        #Calculamos los gradientes de pérdida con respecto a los pesos de la red\n","        loss.backward()\n","        #Actualizamos los pesos de la red con los gradientes calculados para minimizar la pérdida\n","        optimizer.step()"],"metadata":{"id":"pNrn4WVKBmN8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Realizar predicciones en el conjunto de test\n","with torch.no_grad():  # Desactivar el cálculo de gradientes durante la predicción\n","    X_test_tensor = torch.tensor(X_test, dtype=torch.float32) # X_test is already a NumPy array\n","    y_pred = model(X_test_tensor)\n","\n","# Convertir las predicciones a un array NumPy\n","y_pred_np = y_pred.cpu().numpy().flatten()  # Convertir a NumPy y aplanar\n","\n","# Calcular el error cuadrático medio (MSE)\n","# Menor MSE = mejor rendimiento del modelo\n","mse_lr = mean_squared_error(y_test, y_pred_np)\n","print(\"Error cuadrático medio (MSE):\", mse_lr)\n","\n","# Calcular el R-cuadrado (proporción de la varianza en los ratings)\n","# Mayor R = mejor ajuste del modelo a los datos\n","r2_lr = r2_score(y_test, y_pred_np)\n","print(\"R-cuadrado:\", r2_lr)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1734341818036,"user_tz":-60,"elapsed":3,"user":{"displayName":"CLARA MORENO MARTÍNEZ","userId":"03285449096225219779"}},"outputId":"c63c3e54-9a2a-4185-e484-c633d266c5c8","id":"wI6fmx3vBmN9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Error cuadrático medio (MSE): 1.6170024532152851\n","R-cuadrado: 0.10392567201758884\n"]}]},{"cell_type":"markdown","source":["###***CASO MÁS LENTO, MÁS EFICIENTE***\n","\n","**Número de épocas = 20**\n","\n","**Tamaño de batch = 32**\n","\n","**Learning Rate = 0.001**"],"metadata":{"id":"0RrccERDCUsl"}},{"cell_type":"code","source":["# Creamos TensorDataset (combina características y etiquetas en un único objeto)\n","# y DataLoader (proporciona lotes de datos de un tamaño específico (batch_size))\n","train_dataset = TensorDataset(X_train_tensor, y_train_tensor)\n","train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)\n","\n","\n","# Define the neural network model\n","class Net(nn.Module):\n","    # Inicialización capas de la red (3)\n","    def __init__(self, input_size):\n","        super(Net, self).__init__()\n","        # En cada capa se reducen las dimensiones a 128, 64, y 1\n","        # Esto ayuda a aprender representaciones más abstractas de los datos a medida que se avanza a través de las capas\n","        # 128 y 64 son valores comunes para redes pequeñas\n","        # 1: la capa de salida tiene solo 1 neurona porque estamos prediciendo un valor continuo (rating receta)\n","        self.fc1 = nn.Linear(input_size, 128)\n","        self.fc2 = nn.Linear(128, 64)\n","        self.fc3 = nn.Linear(64, 1)\n","\n","    # Definimos cómo fluyen los datos a través de las capas: hacia adelante\n","    # Funcion de activacion ReLU (Rectified Linear Unit) que se aplica a la salida de una capa\n","    # antes de pasarla a la sigueinte capa\n","    def forward(self, x):\n","        x = F.relu(self.fc1(x))\n","        x = F.relu(self.fc2(x))\n","        x = self.fc3(x)\n","        return x\n","\n","\n","# Creamos una instancia del modelo\n","\n","# Obtenemos el tamaño de la entrada de la red basandonos en el número de palabras (columnas)\n","# en los datos de entrenamiento\n","input_size = X_train_tensor.shape[1]\n","\n","# Inicializamos la red con la arquitectura y tamaños de capa especificados\n","model = Net(input_size)\n","\n","# Las función de pérdida que usaremos para evaluar será MSE\n","criterion = nn.MSELoss()  # For regression\n","# Definimos el optimizador, con el que se ajustarán los pesos de la red durante el entrenamiento\n","optimizer = torch.optim.Adam(model.parameters(), lr=0.001)\n","\n","# Entrenamos el modelo\n","# Las épocas de entrenamiento son las veces que se pasa el conjunto de datos a través de la red\n","epochs = 20\n","# Iteramos para cada lote en cada éopca\n","for epoch in range(epochs):\n","    for batch_idx, (data, target) in enumerate(train_loader):\n","        #Reiniciamos los gradientes calculados en la iteracion anterior\n","        optimizer.zero_grad()\n","        #Obtenemos las predicciones del lote actual\n","        output = model(data)\n","        #Calculamos el error (loss) entre las predicciones y los valores reales\n","        loss = criterion(output, target.unsqueeze(1))\n","        #Calculamos los gradientes de pérdida con respecto a los pesos de la red\n","        loss.backward()\n","        #Actualizamos los pesos de la red con los gradientes calculados para minimizar la pérdida\n","        optimizer.step()"],"metadata":{"id":"ZmymQIwgCUsm","executionInfo":{"status":"ok","timestamp":1734364220393,"user_tz":-60,"elapsed":28402,"user":{"displayName":"CLARA MORENO MARTÍNEZ","userId":"03285449096225219779"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["# Realizar predicciones en el conjunto de test\n","with torch.no_grad():  # Desactivar el cálculo de gradientes durante la predicción\n","    X_test_tensor = torch.tensor(X_test, dtype=torch.float32) # X_test is already a NumPy array\n","    y_pred = model(X_test_tensor)\n","\n","# Convertir las predicciones a un array NumPy\n","y_pred_np = y_pred.cpu().numpy().flatten()  # Convertir a NumPy y aplanar\n","\n","# Calcular el error cuadrático medio (MSE)\n","mse_mejor = mean_squared_error(y_test, y_pred_np)\n","print(\"Error cuadrático medio (MSE):\", mse_mejor)\n","\n","# Calcular el R-cuadrado\n","r2_mejor = r2_score(y_test, y_pred_np)\n","print(\"R-cuadrado:\", r2_mejor)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1734364220393,"user_tz":-60,"elapsed":4,"user":{"displayName":"CLARA MORENO MARTÍNEZ","userId":"03285449096225219779"}},"outputId":"e61fca3e-e48f-41ac-dc9d-7137b2f0fe79","id":"n1IwovagCUsn"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["Error cuadrático medio (MSE): 1.630777591546561\n","R-cuadrado: 0.09629207331863898\n"]}]},{"cell_type":"markdown","source":["*Comparamos gráficamente los resultados.*"],"metadata":{"id":"FADznHriH7J4"}},{"cell_type":"code","source":["mse_values = [mse_peor, mse_epocas, mse_batch, mse_lr, mse_mejor]\n","r2_values = [r2_peor, r2_epocas, r2_batch, r2_lr, r2_mejor]\n","labels = ['Caso peor', 'Más épocas', 'Menor batch', 'Menor LR', 'Caso mejor']\n","\n","\n","fig, ax1 = plt.subplots()\n","\n","# Eje MSE\n","ax1.bar(labels, mse_values, color='tab:blue', label='MSE', alpha=0.7)\n","ax1.set_ylabel('MSE', color='tab:blue')\n","ax1.tick_params(axis='y', labelcolor='tab:blue')\n","ax1.set_ylim(0, 2)\n","\n","# Eje R^2\n","ax2 = ax1.twinx()\n","ax2.plot(labels, r2_values, color='tab:red', marker='o', label='R^2')\n","ax2.set_ylabel('R^2', color='tab:red')\n","ax2.tick_params(axis='y', labelcolor='tab:red')\n","ax2.set_ylim(-0.3, 0.2)\n","\n","\n","plt.title('Comparación de MSE y R^2 para Diferentes Configuraciones (W2V)')\n","plt.xticks(rotation=45, ha='right')\n","plt.tight_layout()\n","plt.grid(True, linestyle='--', alpha=0.5)\n","\n","# Leyenda\n","lines, labels = ax1.get_legend_handles_labels()\n","lines2, labels2 = ax2.get_legend_handles_labels()\n","ax2.legend(lines + lines2, labels + labels2, loc='upper center', bbox_to_anchor=(0.5, -0.15), ncol=2)\n","\n","# Mostrar la gráfica\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":463},"id":"q60_pVXXH6rN","executionInfo":{"status":"ok","timestamp":1734341839896,"user_tz":-60,"elapsed":810,"user":{"displayName":"CLARA MORENO MARTÍNEZ","userId":"03285449096225219779"}},"outputId":"cf8fe81e-b930-4e2a-9173-4e5460742e9e"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 600x400 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["###***AUMENTAMOS EN 2 EL NÚMERO DE CAPAS, MEJOR CASO***\n","\n","**Número de épocas = 20**\n","\n","**Tamaño de batch = 32**\n","\n","**Learning Rate = 0.001**"],"metadata":{"id":"KBqkIECdKKbK"}},{"cell_type":"code","source":["# Creamos TensorDataset (combina características y etiquetas en un único objeto)\n","# y DataLoader (proporciona lotes de datos de un tamaño específico (batch_size))\n","train_dataset = TensorDataset(X_train_tensor, y_train_tensor)\n","train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)\n","\n","\n","# Define the neural network model\n","class Net(nn.Module):\n","    # Inicialización capas de la red (3)\n","    def __init__(self, input_size):\n","        super(Net, self).__init__()\n","        # En cada capa se reducen las dimensiones a 128, 64, y 1\n","        # Esto ayuda a aprender representaciones más abstractas de los datos a medida que se avanza a través de las capas\n","        # 128 y 64 son valores comunes para redes pequeñas\n","        # 1: la capa de salida tiene solo 1 neurona porque estamos prediciendo un valor continuo (rating receta)\n","        self.fc1 = nn.Linear(input_size, 128)\n","        self.fc2 = nn.Linear(128, 64)\n","        self.fc3 = nn.Linear(64, 32) # Nueva capa\n","        self.fc4 = nn.Linear(32, 16) # Nueva capa\n","        self.fc5 = nn.Linear(16, 1)  # Capa de salida\n","\n","    # Definimos cómo fluyen los datos a través de las capas: hacia adelante\n","    # Funcion de activacion ReLU (Rectified Linear Unit) que se aplica a la salida de una capa\n","    # antes de pasarla a la sigueinte capa\n","    def forward(self, x):\n","        x = F.relu(self.fc1(x))\n","        x = F.relu(self.fc2(x))\n","        x = F.relu(self.fc3(x))\n","        x = F.relu(self.fc4(x))\n","        x = self.fc5(x)\n","        return x\n","\n","\n","# Creamos una instancia del modelo\n","\n","# Obtenemos el tamaño de la entrada de la red basandonos en el número de palabras (columnas)\n","# en los datos de entrenamiento\n","input_size = X_train_tensor.shape[1]\n","\n","# Inicializamos la red con la arquitectura y tamaños de capa especificados\n","model = Net(input_size)\n","\n","# Las función de pérdida que usaremos para evaluar será MSE\n","criterion = nn.MSELoss()  # For regression\n","# Definimos el optimizador, con el que se ajustarán los pesos de la red durante el entrenamiento\n","optimizer = torch.optim.Adam(model.parameters(), lr=0.001)\n","\n","# Entrenamos el modelo\n","# Las épocas de entrenamiento son las veces que se pasa el conjunto de datos a través de la red\n","epochs = 20\n","# Iteramos para cada lote en cada éopca\n","for epoch in range(epochs):\n","    for batch_idx, (data, target) in enumerate(train_loader):\n","        #Reiniciamos los gradientes calculados en la iteracion anterior\n","        optimizer.zero_grad()\n","        #Obtenemos las predicciones del lote actual\n","        output = model(data)\n","        #Calculamos el error (loss) entre las predicciones y los valores reales\n","        loss = criterion(output, target.unsqueeze(1))\n","        #Calculamos los gradientes de pérdida con respecto a los pesos de la red\n","        loss.backward()\n","        #Actualizamos los pesos de la red con los gradientes calculados para minimizar la pérdida\n","        optimizer.step()"],"metadata":{"id":"emmFFZRHKcew"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Realizar predicciones en el conjunto de test\n","with torch.no_grad():  # Desactivar el cálculo de gradientes durante la predicción\n","    X_test_tensor = torch.tensor(X_test, dtype=torch.float32)\n","    y_pred = model(X_test_tensor)\n","\n","# Convertir las predicciones a un array NumPy\n","y_pred_np = y_pred.cpu().numpy().flatten()\n","\n","# Calcular el error cuadrático medio (MSE)\n","mse_capa_mejor = mean_squared_error(y_test, y_pred_np)\n","print(\"Error cuadrático medio (MSE):\", mse_capa_mejor)\n","\n","# Calcular el R-cuadrado\n","r2_capa_mejor = r2_score(y_test, y_pred_np)\n","print(\"R-cuadrado:\", r2_capa_mejor)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1734341868904,"user_tz":-60,"elapsed":5,"user":{"displayName":"CLARA MORENO MARTÍNEZ","userId":"03285449096225219779"}},"outputId":"cbc53045-aca6-4e77-8211-e56e3a34c45a","id":"TPcn3N9UKcex"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Error cuadrático medio (MSE): 1.6383564863112137\n","R-cuadrado: 0.09209217057910901\n"]}]},{"cell_type":"markdown","source":["###***AUMENTAMOS EN 2 EL NÚMERO DE CAPAS, PEOR CASO***\n","\n","**Número de épocas = 5**\n","\n","**Tamaño de batch = 128**\n","\n","**Learning Rate = 0.1**"],"metadata":{"id":"o3rf2a7oNc16"}},{"cell_type":"code","source":["# Creamos TensorDataset (combina características y etiquetas en un único objeto)\n","# y DataLoader (proporciona lotes de datos de un tamaño específico (batch_size))\n","train_dataset = TensorDataset(X_train_tensor, y_train_tensor)\n","train_loader = DataLoader(train_dataset, batch_size=128, shuffle=True)\n","\n","\n","# Define the neural network model\n","class Net(nn.Module):\n","    # Inicialización capas de la red (3)\n","    def __init__(self, input_size):\n","        super(Net, self).__init__()\n","        # En cada capa se reducen las dimensiones a 128, 64, y 1\n","        # Esto ayuda a aprender representaciones más abstractas de los datos a medida que se avanza a través de las capas\n","        # 128 y 64 son valores comunes para redes pequeñas\n","        # 1: la capa de salida tiene solo 1 neurona porque estamos prediciendo un valor continuo (rating receta)\n","        self.fc1 = nn.Linear(input_size, 128)\n","        self.fc2 = nn.Linear(128, 64)\n","        self.fc3 = nn.Linear(64, 32) # Nueva capa\n","        self.fc4 = nn.Linear(32, 16) # Nueva capa\n","        self.fc5 = nn.Linear(16, 1)  # Capa de salida\n","\n","    # Definimos cómo fluyen los datos a través de las capas: hacia adelante\n","    # Funcion de activacion ReLU (Rectified Linear Unit) que se aplica a la salida de una capa\n","    # antes de pasarla a la sigueinte capa\n","    def forward(self, x):\n","        x = F.relu(self.fc1(x))\n","        x = F.relu(self.fc2(x))\n","        x = F.relu(self.fc3(x))\n","        x = F.relu(self.fc4(x))\n","        x = self.fc5(x)\n","        return x\n","\n","\n","# Creamos una instancia del modelo\n","\n","# Obtenemos el tamaño de la entrada de la red basandonos en el número de palabras (columnas)\n","# en los datos de entrenamiento\n","input_size = X_train_tensor.shape[1]\n","\n","# Inicializamos la red con la arquitectura y tamaños de capa especificados\n","model = Net(input_size)\n","\n","# Las función de pérdida que usaremos para evaluar será MSE\n","criterion = nn.MSELoss()  # For regression\n","# Definimos el optimizador, con el que se ajustarán los pesos de la red durante el entrenamiento\n","optimizer = torch.optim.Adam(model.parameters(), lr=0.1)\n","\n","# Entrenamos el modelo\n","# Las épocas de entrenamiento son las veces que se pasa el conjunto de datos a través de la red\n","epochs = 5\n","# Iteramos para cada lote en cada éopca\n","for epoch in range(epochs):\n","    for batch_idx, (data, target) in enumerate(train_loader):\n","        #Reiniciamos los gradientes calculados en la iteracion anterior\n","        optimizer.zero_grad()\n","        #Obtenemos las predicciones del lote actual\n","        output = model(data)\n","        #Calculamos el error (loss) entre las predicciones y los valores reales\n","        loss = criterion(output, target.unsqueeze(1))\n","        #Calculamos los gradientes de pérdida con respecto a los pesos de la red\n","        loss.backward()\n","        #Actualizamos los pesos de la red con los gradientes calculados para minimizar la pérdida\n","        optimizer.step()"],"metadata":{"id":"FSHdAEbLNc17"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Realizar predicciones en el conjunto de test\n","with torch.no_grad():  # Desactivar el cálculo de gradientes durante la predicción\n","    X_test_tensor = torch.tensor(X_test, dtype=torch.float32)\n","    y_pred = model(X_test_tensor)\n","\n","# Convertir las predicciones a un array NumPy\n","y_pred_np = y_pred.cpu().numpy().flatten()  # Convertir a NumPy y aplanar\n","\n","# Calcular el error cuadrático medio (MSE)\n","mse_capa_peor = mean_squared_error(y_test, y_pred_np)\n","print(\"Error cuadrático medio (MSE):\", mse_capa_peor)\n","\n","# Calcular el R-cuadrado\n","r2_capa_peor = r2_score(y_test, y_pred_np)\n","print(\"R-cuadrado:\", r2_capa_peor)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1734341871516,"user_tz":-60,"elapsed":4,"user":{"displayName":"CLARA MORENO MARTÍNEZ","userId":"03285449096225219779"}},"outputId":"84c2a1d3-2262-447d-8fe4-f75856721dd7","id":"a9kfN617Nc18"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Error cuadrático medio (MSE): 1.7628833026990935\n","R-cuadrado: 0.02308467891533339\n"]}]},{"cell_type":"markdown","source":["*Vemos gráficamente el impacto de aumentar el número de capas.*"],"metadata":{"id":"PnxCqX0EQ9g4"}},{"cell_type":"code","source":["# Datos para la gráfica\n","mse_values = [mse_peor, mse_capa_peor, mse_mejor, mse_capa_mejor]\n","r2_values = [r2_peor, r2_capa_peor, r2_mejor, r2_capa_mejor]\n","labels = ['Peor caso', 'PC 2 capas +', 'Mejor caso', 'MC 2 capas +']\n","\n","# Crear la gráfica\n","fig, ax1 = plt.subplots()\n","\n","# Eje MSE\n","ax1.bar(labels, mse_values, color='tab:blue', label='MSE', alpha=0.7)\n","ax1.set_ylabel('MSE', color='tab:blue')\n","ax1.tick_params(axis='y', labelcolor='tab:blue')\n","ax1.set_ylim(0, 2)\n","\n","# Eje R^2\n","ax2 = ax1.twinx()\n","ax2.plot(labels, r2_values, color='tab:red', marker='o', label='R^2')\n","ax2.set_ylabel('R^2', color='tab:red')\n","ax2.tick_params(axis='y', labelcolor='tab:red')\n","ax2.set_ylim(-0.3, 0.2)\n","\n","# Ajustes adicionales\n","plt.title('Comparación de MSE y R^2 con distinto nº de capas de la red')\n","plt.xticks(rotation=45, ha='right')  # Rotar etiquetas del eje x\n","plt.tight_layout()  # Ajustar el diseño para evitar superposiciones\n","plt.grid(True, linestyle='--', alpha=0.5)\n","\n","# Mostrar leyenda\n","lines, labels = ax1.get_legend_handles_labels()\n","lines2, labels2 = ax2.get_legend_handles_labels()\n","ax2.legend(lines + lines2, labels + labels2, loc='upper center', bbox_to_anchor=(0.5, -0.15), ncol=2)\n","\n","# Mostrar la gráfica\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":463},"executionInfo":{"status":"ok","timestamp":1734341872296,"user_tz":-60,"elapsed":783,"user":{"displayName":"CLARA MORENO MARTÍNEZ","userId":"03285449096225219779"}},"outputId":"fb309443-f9d9-44a5-edf4-d6e1e6974196","id":"f_ifcn3HQ9g5"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 600x400 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["###***100 ÉPOCAS***\n","\n","**Número de épocas = 100**\n","\n","**Tamaño de batch = 64**\n","\n","**Learning Rate = 0.01**"],"metadata":{"id":"GQWrnYz8HOpr"}},{"cell_type":"code","source":["# Creamos TensorDataset (combina características y etiquetas en un único objeto)\n","# y DataLoader (proporciona lotes de datos de un tamaño específico (batch_size))\n","train_dataset = TensorDataset(X_train_tensor, y_train_tensor)\n","train_loader = DataLoader(train_dataset, batch_size=64, shuffle=True)\n","\n","\n","# Define the neural network model\n","class Net(nn.Module):\n","    # Inicialización capas de la red (3)\n","    def __init__(self, input_size):\n","        super(Net, self).__init__()\n","        # En cada capa se reducen las dimensiones a 128, 64, y 1\n","        # Esto ayuda a aprender representaciones más abstractas de los datos a medida que se avanza a través de las capas\n","        # 128 y 64 son valores comunes para redes pequeñas\n","        # 1: la capa de salida tiene solo 1 neurona porque estamos prediciendo un valor continuo (rating receta)\n","        self.fc1 = nn.Linear(input_size, 128)\n","        self.fc2 = nn.Linear(128, 64)\n","        self.fc3 = nn.Linear(64, 1)\n","\n","    # Definimos cómo fluyen los datos a través de las capas: hacia adelante\n","    # Funcion de activacion ReLU (Rectified Linear Unit) que se aplica a la salida de una capa\n","    # antes de pasarla a la sigueinte capa\n","    def forward(self, x):\n","        x = F.relu(self.fc1(x))\n","        x = F.relu(self.fc2(x))\n","        x = self.fc3(x)\n","        return x\n","\n","\n","# Creamos una instancia del modelo\n","\n","# Obtenemos el tamaño de la entrada de la red basandonos en el número de palabras (columnas)\n","# en los datos de entrenamiento\n","input_size = X_train_tensor.shape[1]\n","\n","# Inicializamos la red con la arquitectura y tamaños de capa especificados\n","model = Net(input_size)\n","\n","# Las función de pérdida que usaremos para evaluar será MSE\n","criterion = nn.MSELoss()  # For regression\n","# Definimos el optimizador, con el que se ajustarán los pesos de la red durante el entrenamiento\n","optimizer = torch.optim.Adam(model.parameters(), lr=0.01)\n","\n","# Entrenamos el modelo\n","# Las épocas de entrenamiento son las veces que se pasa el conjunto de datos a través de la red\n","epochs = 100\n","# Iteramos para cada lote en cada éopca\n","for epoch in range(epochs):\n","    for batch_idx, (data, target) in enumerate(train_loader):\n","        #Reiniciamos los gradientes calculados en la iteracion anterior\n","        optimizer.zero_grad()\n","        #Obtenemos las predicciones del lote actual\n","        output = model(data)\n","        #Calculamos el error (loss) entre las predicciones y los valores reales\n","        loss = criterion(output, target.unsqueeze(1))\n","        #Calculamos los gradientes de pérdida con respecto a los pesos de la red\n","        loss.backward()\n","        #Actualizamos los pesos de la red con los gradientes calculados para minimizar la pérdida\n","        optimizer.step()"],"metadata":{"id":"81FH5AiUHM1U","executionInfo":{"status":"ok","timestamp":1734364617410,"user_tz":-60,"elapsed":69651,"user":{"displayName":"CLARA MORENO MARTÍNEZ","userId":"03285449096225219779"}}},"execution_count":18,"outputs":[]},{"cell_type":"code","source":["# Realizar predicciones en el conjunto de test\n","with torch.no_grad():  # Desactivar el cálculo de gradientes durante la predicción\n","    X_test_tensor = torch.tensor(X_test, dtype=torch.float32) # X_test is already a NumPy array\n","    y_pred = model(X_test_tensor)\n","\n","# Convertir las predicciones a un array NumPy\n","y_pred_np = y_pred.cpu().numpy().flatten()  # Convertir a NumPy y aplanar\n","\n","# Calcular el error cuadrático medio (MSE)\n","mse_100 = mean_squared_error(y_test, y_pred_np)\n","print(\"Error cuadrático medio (MSE):\", mse_100)\n","\n","# Calcular el R-cuadrado\n","r2_100 = r2_score(y_test, y_pred_np)\n","print(\"R-cuadrado:\", r2_100)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1734364617411,"user_tz":-60,"elapsed":5,"user":{"displayName":"CLARA MORENO MARTÍNEZ","userId":"03285449096225219779"}},"outputId":"d52cb253-d0c3-42a8-b344-be1b770d92b2","id":"S9RvKMURHM1V"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["Error cuadrático medio (MSE): 1.992158567986738\n","R-cuadrado: -0.10396997017137521\n"]}]},{"cell_type":"markdown","source":["###***200 ÉPOCAS***\n","\n","**Número de épocas = 200**\n","\n","**Tamaño de batch = 64**\n","\n","**Learning Rate = 0.01**"],"metadata":{"id":"hbek5q1yLTAW"}},{"cell_type":"code","source":["# Creamos TensorDataset (combina características y etiquetas en un único objeto)\n","# y DataLoader (proporciona lotes de datos de un tamaño específico (batch_size))\n","train_dataset = TensorDataset(X_train_tensor, y_train_tensor)\n","train_loader = DataLoader(train_dataset, batch_size=64, shuffle=True)\n","\n","\n","# Define the neural network model\n","class Net(nn.Module):\n","    # Inicialización capas de la red (3)\n","    def __init__(self, input_size):\n","        super(Net, self).__init__()\n","        # En cada capa se reducen las dimensiones a 128, 64, y 1\n","        # Esto ayuda a aprender representaciones más abstractas de los datos a medida que se avanza a través de las capas\n","        # 128 y 64 son valores comunes para redes pequeñas\n","        # 1: la capa de salida tiene solo 1 neurona porque estamos prediciendo un valor continuo (rating receta)\n","        self.fc1 = nn.Linear(input_size, 128)\n","        self.fc2 = nn.Linear(128, 64)\n","        self.fc3 = nn.Linear(64, 1)\n","\n","    # Definimos cómo fluyen los datos a través de las capas: hacia adelante\n","    # Funcion de activacion ReLU (Rectified Linear Unit) que se aplica a la salida de una capa\n","    # antes de pasarla a la sigueinte capa\n","    def forward(self, x):\n","        x = F.relu(self.fc1(x))\n","        x = F.relu(self.fc2(x))\n","        x = self.fc3(x)\n","        return x\n","\n","\n","# Creamos una instancia del modelo\n","\n","# Obtenemos el tamaño de la entrada de la red basandonos en el número de palabras (columnas)\n","# en los datos de entrenamiento\n","input_size = X_train_tensor.shape[1]\n","\n","# Inicializamos la red con la arquitectura y tamaños de capa especificados\n","model = Net(input_size)\n","\n","# Las función de pérdida que usaremos para evaluar será MSE\n","criterion = nn.MSELoss()  # For regression\n","# Definimos el optimizador, con el que se ajustarán los pesos de la red durante el entrenamiento\n","optimizer = torch.optim.Adam(model.parameters(), lr=0.01)\n","\n","# Entrenamos el modelo\n","# Las épocas de entrenamiento son las veces que se pasa el conjunto de datos a través de la red\n","epochs = 200\n","# Iteramos para cada lote en cada éopca\n","for epoch in range(epochs):\n","    for batch_idx, (data, target) in enumerate(train_loader):\n","        #Reiniciamos los gradientes calculados en la iteracion anterior\n","        optimizer.zero_grad()\n","        #Obtenemos las predicciones del lote actual\n","        output = model(data)\n","        #Calculamos el error (loss) entre las predicciones y los valores reales\n","        loss = criterion(output, target.unsqueeze(1))\n","        #Calculamos los gradientes de pérdida con respecto a los pesos de la red\n","        loss.backward()\n","        #Actualizamos los pesos de la red con los gradientes calculados para minimizar la pérdida\n","        optimizer.step()"],"metadata":{"id":"gVzSY7ONLTAX","executionInfo":{"status":"ok","timestamp":1734364762184,"user_tz":-60,"elapsed":144776,"user":{"displayName":"CLARA MORENO MARTÍNEZ","userId":"03285449096225219779"}}},"execution_count":20,"outputs":[]},{"cell_type":"code","source":["# Realizar predicciones en el conjunto de test\n","with torch.no_grad():  # Desactivar el cálculo de gradientes durante la predicción\n","    X_test_tensor = torch.tensor(X_test, dtype=torch.float32) # X_test is already a NumPy array\n","    y_pred = model(X_test_tensor)\n","\n","# Convertir las predicciones a un array NumPy\n","y_pred_np = y_pred.cpu().numpy().flatten()  # Convertir a NumPy y aplanar\n","\n","# Calcular el error cuadrático medio (MSE)\n","mse_200 = mean_squared_error(y_test, y_pred_np)\n","print(\"Error cuadrático medio (MSE):\", mse_200)\n","\n","# Calcular el R-cuadrado\n","r2_200 = r2_score(y_test, y_pred_np)\n","print(\"R-cuadrado:\", r2_200)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1734364762184,"user_tz":-60,"elapsed":12,"user":{"displayName":"CLARA MORENO MARTÍNEZ","userId":"03285449096225219779"}},"outputId":"2247f356-e0f1-44dd-8fb4-0292c8f1acae","id":"K2O_sJUSLTAY"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["Error cuadrático medio (MSE): 1.959601962872587\n","R-cuadrado: -0.08592847741356091\n"]}]},{"cell_type":"markdown","source":["*Vemos gráficamente el impacto de aumentar el número de épocas a 100 y 200.*"],"metadata":{"id":"04Oa_AegP9QE"}},{"cell_type":"code","source":["# Datos para la gráfica\n","mse_values = [mse_peor, mse_epocas, mse_100, mse_200, mse_mejor]\n","r2_values = [r2_peor, r2_epocas, r2_100, r2_200, r2_mejor]\n","labels = ['Peor caso', '20 ép.', '100 ép.', '200 ép.', 'Mejor caso']\n","\n","# Crear la gráfica\n","fig, ax1 = plt.subplots()\n","\n","# Eje MSE\n","ax1.bar(labels, mse_values, color='tab:blue', label='MSE', alpha=0.7)\n","ax1.set_ylabel('MSE', color='tab:blue')\n","ax1.tick_params(axis='y', labelcolor='tab:blue')\n","ax1.set_ylim(0, 2)\n","\n","# Eje R^2\n","ax2 = ax1.twinx()\n","ax2.plot(labels, r2_values, color='tab:red', marker='o', label='R^2')\n","ax2.set_ylabel('R^2', color='tab:red')\n","ax2.tick_params(axis='y', labelcolor='tab:red')\n","ax2.set_ylim(-0.3, 0.2)\n","\n","# Ajustes adicionales\n","plt.title('Comparación de MSE y R^2 aumentando a 100 y 200 el nº de épocas')\n","plt.xticks(rotation=45, ha='right')  # Rotar etiquetas del eje x\n","plt.tight_layout()  # Ajustar el diseño para evitar superposiciones\n","plt.grid(True, linestyle='--', alpha=0.5)\n","\n","# Mostrar leyenda\n","lines, labels = ax1.get_legend_handles_labels()\n","lines2, labels2 = ax2.get_legend_handles_labels()\n","ax2.legend(lines + lines2, labels + labels2, loc='upper center', bbox_to_anchor=(0.5, -0.15), ncol=2)\n","\n","# Mostrar la gráfica\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":54},"executionInfo":{"status":"ok","timestamp":1734364762622,"user_tz":-60,"elapsed":448,"user":{"displayName":"CLARA MORENO MARTÍNEZ","userId":"03285449096225219779"}},"outputId":"9c306a31-07df-46c3-dc66-237810812bc2","id":"FajB3K17P9QF"},"execution_count":22,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 600x400 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]}]}